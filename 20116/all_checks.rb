@info = [{:concept_id=>26, :body=>"README is present and not empty", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(files_exist([\"README.md\"]), op_not(files_empty([\"README.md\"])))"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(is_equal(\"\", exec_bash(\"rm -f hsh\")), gcc([\"*.c\"], \"hsh\"))"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `/bin/ls`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/ls/bin_ls.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./bin_ls.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f bin_ls.bash\")))", :files=>"235/checker.bash, 235/all/ls/bin_ls.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `/bin/ls` 3 times\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/ls/bin_ls_3_times.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./bin_ls_3_times.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f bin_ls_3_times.bash\")))", :files=>"235/checker.bash, 235/all/ls/bin_ls_3_times.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `/bin/ls` 4 times (surrounded by spaces)\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/ls/bin_ls_spaces.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./bin_ls_spaces.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f bin_ls_spaces.bash\")))", :files=>"235/checker.bash, 235/all/ls/bin_ls_spaces.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Copy the file /bin/ls to `hbtn_ls` (in the current directory) and execute `./hbtn_ls /var`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/ls/ls_in_current_dir.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./ls_in_current_dir.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f ls_in_current_dir.bash\")))", :files=>"235/checker.bash, 235/all/ls/ls_in_current_dir.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Spaces only (small)\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/empty/empty_input_small.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./empty_input_small.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f empty_input_small.bash\")))", :files=>"235/checker.bash, 235/all/empty/empty_input_small.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Spaces only (large)\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/empty/empty_input_large.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./empty_input_large.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f empty_input_large.bash\")))", :files=>"235/checker.bash, 235/all/empty/empty_input_large.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Spaces only (medium)\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/empty/empty_input_medium.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./empty_input_medium.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f empty_input_medium.bash\")))", :files=>"235/checker.bash, 235/all/empty/empty_input_medium.bash"}]}]