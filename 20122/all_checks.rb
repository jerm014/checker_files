@info = [{:concept_id=>26, :body=>"README is present and not empty", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(files_exist([\"README.md\"]), op_not(files_empty([\"README.md\"])))"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(is_equal(\"\", exec_bash(\"rm -f hsh\")), gcc([\"*.c\"], \"hsh\"))"}]}, {:concept_id=>26, :body=>"Correct output - case: Exit with the status `1000`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/exit/exit_1000.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./exit_1000.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f exit_1000.bash\")))", :files=>"235/checker.bash, 235/all/exit/exit_1000.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Exit with the number `98` as parameter\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/exit/exit_with_status.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./exit_with_status.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f exit_with_status.bash\")))", :files=>"235/checker.bash, 235/all/exit/exit_with_status.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Exit with a negative number\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/exit/exit_neg_number.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./exit_neg_number.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f exit_neg_number.bash\")))", :files=>"235/checker.bash, 235/all/exit/exit_neg_number.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute a command that fails, and exit without parameter\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/exit/exit_no_arg_1.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./exit_no_arg_1.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f exit_no_arg_1.bash\")))", :files=>"235/checker.bash, 235/all/exit/exit_no_arg_1.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Exit without parameter\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/exit/exit_no_arg.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./exit_no_arg.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f exit_no_arg.bash\")))", :files=>"235/checker.bash, 235/all/exit/exit_no_arg.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Exit with a string as parameter\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/exit/exit_string.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./exit_string.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f exit_string.bash\")))", :files=>"235/checker.bash, 235/all/exit/exit_string.bash"}]}]