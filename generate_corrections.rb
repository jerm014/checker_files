info = [[{:concept_id=>26, :body=>"README is present and not empty", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(files_exist([\"README.md\"]), !files_empty([\"README.md\"]))"}]}, {:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>3, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1445/main_0.c\"], \"0-binary_tree_node_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Creates a single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./0-binary_tree_node_0\", \"270/1445/output_0\"), valgrind_error(\"./0-binary_tree_node_0\"), valgrind_leak(\"./0-binary_tree_node_0\"))", :files=>"270/1445/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Creates a node plus its left and right children", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1445/main_1.c\"], \"0-binary_tree_node_1\"), compare(\"./0-binary_tree_node_1\", \"270/1445/output_1\"), valgrind_error(\"./0-binary_tree_node_1\"), valgrind_leak(\"./0-binary_tree_node_1\"))", :files=>"270/1445/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Creates a node, its left and right children, plus the left and right children of the previous left and right", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1445/main_2.c\"], \"0-binary_tree_node_2\"), compare(\"./0-binary_tree_node_2\", \"270/1445/output_2\"), valgrind_error(\"./0-binary_tree_node_2\"), valgrind_leak(\"./0-binary_tree_node_2\"))", :files=>"270/1445/main_2.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./0-binary_tree_node_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"0-binary_tree_node.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"1-binary_tree_insert_left.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"1-binary_tree_insert_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1468/main_0.c\"], \"1-binary_tree_insert_left_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert left child in a root node that has no left child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./1-binary_tree_insert_left_0\", \"270/1468/output_0\"), valgrind_error(\"./1-binary_tree_insert_left_0\"), valgrind_leak(\"./1-binary_tree_insert_left_0\"))", :files=>"270/1468/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert left child in a node that has no left child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"1-binary_tree_insert_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1468/main_1.c\"], \"1-binary_tree_insert_left_1\"), compare(\"./1-binary_tree_insert_left_1\", \"270/1468/output_1\"), valgrind_error(\"./1-binary_tree_insert_left_1\"), valgrind_leak(\"./1-binary_tree_insert_left_1\"))", :files=>"270/1468/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert left child in a node that already has a left child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"1-binary_tree_insert_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1468/main_2.c\"], \"1-binary_tree_insert_left_2\"), compare(\"./1-binary_tree_insert_left_2\", \"270/1468/output_2\"), valgrind_error(\"./1-binary_tree_insert_left_2\"), valgrind_leak(\"./1-binary_tree_insert_left_2\"))", :files=>"270/1468/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_insert_left(NULL, 64);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"1-binary_tree_insert_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1468/main_3.c\"], \"1-binary_tree_insert_left_3\"), compare(\"./1-binary_tree_insert_left_3\", \"270/1468/output_3\"), valgrind_error(\"./1-binary_tree_insert_left_3\"), valgrind_leak(\"./1-binary_tree_insert_left_3\"))", :files=>"270/1468/main_3.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./1-binary_tree_insert_left_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"1-binary_tree_insert_left.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"1-binary_tree_insert_left.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"2-binary_tree_insert_right.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"2-binary_tree_insert_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1469/main_0.c\"], \"2-binary_tree_insert_right_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert right child in a root node that has no right child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./2-binary_tree_insert_right_0\", \"270/1469/output_0\"), valgrind_error(\"./2-binary_tree_insert_right_0\"), valgrind_leak(\"./2-binary_tree_insert_right_0\"))", :files=>"270/1469/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert right child in a node that has no right child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"2-binary_tree_insert_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1469/main_1.c\"], \"2-binary_tree_insert_right_1\"), compare(\"./2-binary_tree_insert_right_1\", \"270/1469/output_1\"), valgrind_error(\"./2-binary_tree_insert_right_1\"), valgrind_leak(\"./2-binary_tree_insert_right_1\"))", :files=>"270/1469/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert right child in a node that already has a right child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"2-binary_tree_insert_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1469/main_2.c\"], \"2-binary_tree_insert_right_2\"), compare(\"./2-binary_tree_insert_right_2\", \"270/1469/output_2\"), valgrind_error(\"./2-binary_tree_insert_right_2\"), valgrind_leak(\"./2-binary_tree_insert_right_2\"))", :files=>"270/1469/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_insert_right(NULL, 64);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"2-binary_tree_insert_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1469/main_3.c\"], \"2-binary_tree_insert_right_3\"), compare(\"./2-binary_tree_insert_right_3\", \"270/1469/output_3\"), valgrind_error(\"./2-binary_tree_insert_right_3\"), valgrind_leak(\"./2-binary_tree_insert_right_3\"))", :files=>"270/1469/main_3.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./2-binary_tree_insert_right_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"2-binary_tree_insert_right.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"2-binary_tree_insert_right.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"3-binary_tree_delete.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"3-binary_tree_delete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/1470/main_0.c\"], \"3-binary_tree_delete_0\")"}]}, {:concept_id=>26, :body=>"No memory leak - case: Delete a single node (no children)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(valgrind_error(\"./3-binary_tree_delete_0\"), valgrind_leak(\"./3-binary_tree_delete_0\"))", :files=>"270/1470/main_0.c"}]}, {:concept_id=>26, :body=>"No memory leak - case: Delete a tree with only a left child and a right child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"3-binary_tree_delete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/1470/main_1.c\"], \"3-binary_tree_delete_1\"), valgrind_error(\"./3-binary_tree_delete_1\"), valgrind_leak(\"./3-binary_tree_delete_1\"))", :files=>"270/1470/main_1.c"}]}, {:concept_id=>26, :body=>"No memory leak - case: Delete a tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"3-binary_tree_delete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/1470/main_2.c\"], \"3-binary_tree_delete_2\"), valgrind_error(\"./3-binary_tree_delete_2\"), valgrind_leak(\"./3-binary_tree_delete_2\"))", :files=>"270/1470/main_2.c"}]}, {:concept_id=>26, :body=>"No memory leak - case: `binary_tree_delete(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"3-binary_tree_delete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/1470/main_3.c\"], \"3-binary_tree_delete_3\"), valgrind_error(\"./3-binary_tree_delete_3\"), valgrind_leak(\"./3-binary_tree_delete_3\"))", :files=>"270/1470/main_3.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"3-binary_tree_delete.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"3-binary_tree_delete.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"4-binary_tree_is_leaf.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"4-binary_tree_is_leaf.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1471/main_0.c\"], \"4-binary_tree_is_leaf_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Root node without any children", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./4-binary_tree_is_leaf_0\", \"270/1471/output_0\"), valgrind_error(\"./4-binary_tree_is_leaf_0\"), valgrind_leak(\"./4-binary_tree_is_leaf_0\"))", :files=>"270/1471/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Root node with one right child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"4-binary_tree_is_leaf.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1471/main_1.c\"], \"4-binary_tree_is_leaf_1\"), compare(\"./4-binary_tree_is_leaf_1\", \"270/1471/output_1\"), valgrind_error(\"./4-binary_tree_is_leaf_1\"), valgrind_leak(\"./4-binary_tree_is_leaf_1\"))", :files=>"270/1471/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Root node with one left child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"4-binary_tree_is_leaf.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1471/main_2.c\"], \"4-binary_tree_is_leaf_2\"), compare(\"./4-binary_tree_is_leaf_2\", \"270/1471/output_2\"), valgrind_error(\"./4-binary_tree_is_leaf_2\"), valgrind_leak(\"./4-binary_tree_is_leaf_2\"))", :files=>"270/1471/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Root node with one right child and one left child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"4-binary_tree_is_leaf.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1471/main_3.c\"], \"4-binary_tree_is_leaf_3\"), compare(\"./4-binary_tree_is_leaf_3\", \"270/1471/output_3\"), valgrind_error(\"./4-binary_tree_is_leaf_3\"), valgrind_leak(\"./4-binary_tree_is_leaf_3\"))", :files=>"270/1471/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_is_leaf(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"4-binary_tree_is_leaf.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1471/main_4.c\"], \"4-binary_tree_is_leaf_4\"), compare(\"./4-binary_tree_is_leaf_4\", \"270/1471/output_4\"), valgrind_error(\"./4-binary_tree_is_leaf_4\"), valgrind_leak(\"./4-binary_tree_is_leaf_4\"))", :files=>"270/1471/main_4.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"4-binary_tree_is_leaf.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"4-binary_tree_is_leaf.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"5-binary_tree_is_root.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"5-binary_tree_is_root.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1472/main_0.c\"], \"5-binary_tree_is_root_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Root node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./5-binary_tree_is_root_0\", \"270/1472/output_0\"), valgrind_error(\"./5-binary_tree_is_root_0\"), valgrind_leak(\"./5-binary_tree_is_root_0\"))", :files=>"270/1472/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Right child of the root node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"5-binary_tree_is_root.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1472/main_1.c\"], \"5-binary_tree_is_root_1\"), compare(\"./5-binary_tree_is_root_1\", \"270/1472/output_1\"), valgrind_error(\"./5-binary_tree_is_root_1\"), valgrind_leak(\"./5-binary_tree_is_root_1\"))", :files=>"270/1472/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left child of the root node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"5-binary_tree_is_root.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1472/main_2.c\"], \"5-binary_tree_is_root_2\"), compare(\"./5-binary_tree_is_root_2\", \"270/1472/output_2\"), valgrind_error(\"./5-binary_tree_is_root_2\"), valgrind_leak(\"./5-binary_tree_is_root_2\"))", :files=>"270/1472/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_is_root(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"5-binary_tree_is_root.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1472/main_3.c\"], \"5-binary_tree_is_root_3\"), compare(\"./5-binary_tree_is_root_3\", \"270/1472/output_3\"), valgrind_error(\"./5-binary_tree_is_root_3\"), valgrind_leak(\"./5-binary_tree_is_root_3\"))", :files=>"270/1472/main_3.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"5-binary_tree_is_root.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"5-binary_tree_is_root.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"6-binary_tree_preorder.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"6-binary_tree_preorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1473/main_0.c\"], \"6-binary_tree_preorder_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./6-binary_tree_preorder_0\", \"270/1473/output_0\"), valgrind_error(\"./6-binary_tree_preorder_0\"), valgrind_leak(\"./6-binary_tree_preorder_0\"))", :files=>"270/1473/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"6-binary_tree_preorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1473/main_1.c\"], \"6-binary_tree_preorder_1\"), compare(\"./6-binary_tree_preorder_1\", \"270/1473/output_1\"), valgrind_error(\"./6-binary_tree_preorder_1\"), valgrind_leak(\"./6-binary_tree_preorder_1\"))", :files=>"270/1473/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"6-binary_tree_preorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1473/main_2.c\"], \"6-binary_tree_preorder_2\"), compare(\"./6-binary_tree_preorder_2\", \"270/1473/output_2\"), valgrind_error(\"./6-binary_tree_preorder_2\"), valgrind_leak(\"./6-binary_tree_preorder_2\"))", :files=>"270/1473/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"6-binary_tree_preorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1473/main_3.c\"], \"6-binary_tree_preorder_3\"), compare(\"./6-binary_tree_preorder_3\", \"270/1473/output_3\"), valgrind_error(\"./6-binary_tree_preorder_3\"), valgrind_leak(\"./6-binary_tree_preorder_3\"))", :files=>"270/1473/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_preorder(NULL, &_func);` where `_func` is a valid pointer", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"6-binary_tree_preorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1473/main_4.c\"], \"6-binary_tree_preorder_4\"), compare(\"./6-binary_tree_preorder_4\", \"270/1473/output_4\"), valgrind_error(\"./6-binary_tree_preorder_4\"), valgrind_leak(\"./6-binary_tree_preorder_4\"))", :files=>"270/1473/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_preorder(root, NULL);` where `root` is a valid pointer", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"6-binary_tree_preorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1473/main_5.c\"], \"6-binary_tree_preorder_5\"), compare(\"./6-binary_tree_preorder_5\", \"270/1473/output_5\"), valgrind_error(\"./6-binary_tree_preorder_5\"), valgrind_leak(\"./6-binary_tree_preorder_5\"))", :files=>"270/1473/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"6-binary_tree_preorder.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"6-binary_tree_preorder.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"7-binary_tree_inorder.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"7-binary_tree_inorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1474/main_0.c\"], \"7-binary_tree_inorder_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./7-binary_tree_inorder_0\", \"270/1474/output_0\"), valgrind_error(\"./7-binary_tree_inorder_0\"), valgrind_leak(\"./7-binary_tree_inorder_0\"))", :files=>"270/1474/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"7-binary_tree_inorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1474/main_1.c\"], \"7-binary_tree_inorder_1\"), compare(\"./7-binary_tree_inorder_1\", \"270/1474/output_1\"), valgrind_error(\"./7-binary_tree_inorder_1\"), valgrind_leak(\"./7-binary_tree_inorder_1\"))", :files=>"270/1474/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"7-binary_tree_inorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1474/main_2.c\"], \"7-binary_tree_inorder_2\"), compare(\"./7-binary_tree_inorder_2\", \"270/1474/output_2\"), valgrind_error(\"./7-binary_tree_inorder_2\"), valgrind_leak(\"./7-binary_tree_inorder_2\"))", :files=>"270/1474/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"7-binary_tree_inorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1474/main_3.c\"], \"7-binary_tree_inorder_3\"), compare(\"./7-binary_tree_inorder_3\", \"270/1474/output_3\"), valgrind_error(\"./7-binary_tree_inorder_3\"), valgrind_leak(\"./7-binary_tree_inorder_3\"))", :files=>"270/1474/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_inorder(NULL, &_func);` where `_func` is a valid pointer", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"7-binary_tree_inorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1474/main_4.c\"], \"7-binary_tree_inorder_4\"), compare(\"./7-binary_tree_inorder_4\", \"270/1474/output_4\"), valgrind_error(\"./7-binary_tree_inorder_4\"), valgrind_leak(\"./7-binary_tree_inorder_4\"))", :files=>"270/1474/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_inorder(root, NULL);` where `root` is a valid pointer", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"7-binary_tree_inorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1474/main_5.c\"], \"7-binary_tree_inorder_5\"), compare(\"./7-binary_tree_inorder_5\", \"270/1474/output_5\"), valgrind_error(\"./7-binary_tree_inorder_5\"))", :files=>"270/1474/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"7-binary_tree_inorder.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"7-binary_tree_inorder.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"8-binary_tree_postorder.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"8-binary_tree_postorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1475/main_0.c\"], \"8-binary_tree_postorder_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./8-binary_tree_postorder_0\", \"270/1475/output_0\"), valgrind_error(\"./8-binary_tree_postorder_0\"), valgrind_leak(\"./8-binary_tree_postorder_0\"))", :files=>"270/1475/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"8-binary_tree_postorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1475/main_1.c\"], \"8-binary_tree_postorder_1\"), compare(\"./8-binary_tree_postorder_1\", \"270/1475/output_1\"), valgrind_error(\"./8-binary_tree_postorder_1\"), valgrind_leak(\"./8-binary_tree_postorder_1\"))", :files=>"270/1475/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"8-binary_tree_postorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1475/main_2.c\"], \"8-binary_tree_postorder_2\"), compare(\"./8-binary_tree_postorder_2\", \"270/1475/output_2\"), valgrind_error(\"./8-binary_tree_postorder_2\"), valgrind_leak(\"./8-binary_tree_postorder_2\"))", :files=>"270/1475/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"8-binary_tree_postorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1475/main_3.c\"], \"8-binary_tree_postorder_3\"), compare(\"./8-binary_tree_postorder_3\", \"270/1475/output_3\"), valgrind_error(\"./8-binary_tree_postorder_3\"), valgrind_leak(\"./8-binary_tree_postorder_3\"))", :files=>"270/1475/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_postorder(NULL, &_func);` where `_func` is a valid pointer", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"8-binary_tree_postorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1475/main_4.c\"], \"8-binary_tree_postorder_4\"), compare(\"./8-binary_tree_postorder_4\", \"270/1475/output_4\"), valgrind_error(\"./8-binary_tree_postorder_4\"), valgrind_leak(\"./8-binary_tree_postorder_4\"))", :files=>"270/1475/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_postorder(root, NULL);` where `root` is a valid pointer", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"8-binary_tree_postorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1475/main_5.c\"], \"8-binary_tree_postorder_5\"), compare(\"./8-binary_tree_postorder_5\", \"270/1475/output_5\"), valgrind_error(\"./8-binary_tree_postorder_5\"), valgrind_leak(\"./8-binary_tree_postorder_5\"))", :files=>"270/1475/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"8-binary_tree_postorder.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"8-binary_tree_postorder.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"9-binary_tree_height.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"9-binary_tree_height.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1476/main_0.c\"], \"9-binary_tree_height_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./9-binary_tree_height_0\", \"270/1476/output_0\"), valgrind_error(\"./9-binary_tree_height_0\"), valgrind_leak(\"./9-binary_tree_height_0\"))", :files=>"270/1476/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"9-binary_tree_height.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1476/main_1.c\"], \"9-binary_tree_height_1\"), compare(\"./9-binary_tree_height_1\", \"270/1476/output_1\"), valgrind_error(\"./9-binary_tree_height_1\"), valgrind_leak(\"./9-binary_tree_height_1\"))", :files=>"270/1476/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"9-binary_tree_height.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1476/main_2.c\"], \"9-binary_tree_height_2\"), compare(\"./9-binary_tree_height_2\", \"270/1476/output_2\"), valgrind_error(\"./9-binary_tree_height_2\"), valgrind_leak(\"./9-binary_tree_height_2\"))", :files=>"270/1476/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"9-binary_tree_height.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1476/main_3.c\"], \"9-binary_tree_height_3\"), compare(\"./9-binary_tree_height_3\", \"270/1476/output_3\"), valgrind_error(\"./9-binary_tree_height_3\"), valgrind_leak(\"./9-binary_tree_height_3\"))", :files=>"270/1476/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not perfect tree with max height 4", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"9-binary_tree_height.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1476/main_4.c\"], \"9-binary_tree_height_4\"), compare(\"./9-binary_tree_height_4\", \"270/1476/output_4\"), valgrind_error(\"./9-binary_tree_height_4\"), valgrind_leak(\"./9-binary_tree_height_4\"))", :files=>"270/1476/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_height(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"9-binary_tree_height.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1476/main_5.c\"], \"9-binary_tree_height_5\"), compare(\"./9-binary_tree_height_5\", \"270/1476/output_5\"), valgrind_error(\"./9-binary_tree_height_5\"), valgrind_leak(\"./9-binary_tree_height_5\"))", :files=>"270/1476/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"9-binary_tree_height.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"9-binary_tree_height.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"10-binary_tree_depth.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"10-binary_tree_depth.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1477/main_0.c\"], \"10-binary_tree_depth_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Depth of root node in a perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./10-binary_tree_depth_0\", \"270/1477/output_0\"), valgrind_error(\"./10-binary_tree_depth_0\"), valgrind_leak(\"./10-binary_tree_depth_0\"))", :files=>"270/1477/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Depth of left node in a perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"10-binary_tree_depth.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1477/main_1.c\"], \"10-binary_tree_depth_1\"), compare(\"./10-binary_tree_depth_1\", \"270/1477/output_1\"), valgrind_error(\"./10-binary_tree_depth_1\"), valgrind_leak(\"./10-binary_tree_depth_1\"))", :files=>"270/1477/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Depth of right-left node in a perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"10-binary_tree_depth.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1477/main_2.c\"], \"10-binary_tree_depth_2\"), compare(\"./10-binary_tree_depth_2\", \"270/1477/output_2\"), valgrind_error(\"./10-binary_tree_depth_2\"), valgrind_leak(\"./10-binary_tree_depth_2\"))", :files=>"270/1477/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Depth of right-right-left node in a perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"10-binary_tree_depth.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1477/main_3.c\"], \"10-binary_tree_depth_3\"), compare(\"./10-binary_tree_depth_3\", \"270/1477/output_3\"), valgrind_error(\"./10-binary_tree_depth_3\"), valgrind_leak(\"./10-binary_tree_depth_3\"))", :files=>"270/1477/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_depth(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"10-binary_tree_depth.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1477/main_4.c\"], \"10-binary_tree_depth_4\"), compare(\"./10-binary_tree_depth_4\", \"270/1477/output_4\"), valgrind_error(\"./10-binary_tree_depth_4\"), valgrind_leak(\"./10-binary_tree_depth_4\"))", :files=>"270/1477/main_4.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"10-binary_tree_depth.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"10-binary_tree_depth.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"11-binary_tree_size.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"11-binary_tree_size.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1478/main_0.c\"], \"11-binary_tree_size_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./11-binary_tree_size_0\", \"270/1478/output_0\"), valgrind_error(\"./11-binary_tree_size_0\"), valgrind_leak(\"./11-binary_tree_size_0\"))", :files=>"270/1478/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"11-binary_tree_size.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1478/main_1.c\"], \"11-binary_tree_size_1\"), compare(\"./11-binary_tree_size_1\", \"270/1478/output_1\"), valgrind_error(\"./11-binary_tree_size_1\"), valgrind_leak(\"./11-binary_tree_size_1\"))", :files=>"270/1478/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"11-binary_tree_size.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1478/main_2.c\"], \"11-binary_tree_size_2\"), compare(\"./11-binary_tree_size_2\", \"270/1478/output_2\"), valgrind_error(\"./11-binary_tree_size_2\"), valgrind_leak(\"./11-binary_tree_size_2\"))", :files=>"270/1478/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"11-binary_tree_size.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1478/main_3.c\"], \"11-binary_tree_size_3\"), compare(\"./11-binary_tree_size_3\", \"270/1478/output_3\"), valgrind_error(\"./11-binary_tree_size_3\"), valgrind_leak(\"./11-binary_tree_size_3\"))", :files=>"270/1478/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not perfect tree of max height 4", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"11-binary_tree_size.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1478/main_4.c\"], \"11-binary_tree_size_4\"), compare(\"./11-binary_tree_size_4\", \"270/1478/output_4\"), valgrind_error(\"./11-binary_tree_size_4\"), valgrind_leak(\"./11-binary_tree_size_4\"))", :files=>"270/1478/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_size(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"11-binary_tree_size.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1478/main_5.c\"], \"11-binary_tree_size_5\"), compare(\"./11-binary_tree_size_5\", \"270/1478/output_5\"), valgrind_error(\"./11-binary_tree_size_5\"), valgrind_leak(\"./11-binary_tree_size_5\"))", :files=>"270/1478/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"11-binary_tree_size.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"11-binary_tree_size.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"12-binary_tree_leaves.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"12-binary_tree_leaves.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1479/main_0.c\"], \"12-binary_tree_leaves_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./12-binary_tree_leaves_0\", \"270/1479/output_0\"), valgrind_error(\"./12-binary_tree_leaves_0\"), valgrind_leak(\"./12-binary_tree_leaves_0\"))", :files=>"270/1479/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"12-binary_tree_leaves.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1479/main_1.c\"], \"12-binary_tree_leaves_1\"), compare(\"./12-binary_tree_leaves_1\", \"270/1479/output_1\"), valgrind_error(\"./12-binary_tree_leaves_1\"), valgrind_leak(\"./12-binary_tree_leaves_1\"))", :files=>"270/1479/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"12-binary_tree_leaves.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1479/main_2.c\"], \"12-binary_tree_leaves_2\"), compare(\"./12-binary_tree_leaves_2\", \"270/1479/output_2\"), valgrind_error(\"./12-binary_tree_leaves_2\"), valgrind_leak(\"./12-binary_tree_leaves_2\"))", :files=>"270/1479/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"12-binary_tree_leaves.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1479/main_3.c\"], \"12-binary_tree_leaves_3\"), compare(\"./12-binary_tree_leaves_3\", \"270/1479/output_3\"), valgrind_error(\"./12-binary_tree_leaves_3\"), valgrind_leak(\"./12-binary_tree_leaves_3\"))", :files=>"270/1479/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not perfect tree of max height 4", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"12-binary_tree_leaves.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1479/main_4.c\"], \"12-binary_tree_leaves_4\"), compare(\"./12-binary_tree_leaves_4\", \"270/1479/output_4\"), valgrind_error(\"./12-binary_tree_leaves_4\"), valgrind_leak(\"./12-binary_tree_leaves_4\"))", :files=>"270/1479/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_leaves(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"12-binary_tree_leaves.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1479/main_5.c\"], \"12-binary_tree_leaves_5\"), compare(\"./12-binary_tree_leaves_5\", \"270/1479/output_5\"), valgrind_error(\"./12-binary_tree_leaves_5\"), valgrind_leak(\"./12-binary_tree_leaves_5\"))", :files=>"270/1479/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"12-binary_tree_leaves.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"12-binary_tree_leaves.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"13-binary_tree_nodes.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"13-binary_tree_nodes.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1480/main_0.c\"], \"13-binary_tree_nodes_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./13-binary_tree_nodes_0\", \"270/1480/output_0\"), valgrind_error(\"./13-binary_tree_nodes_0\"), valgrind_leak(\"./13-binary_tree_nodes_0\"))", :files=>"270/1480/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"13-binary_tree_nodes.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1480/main_1.c\"], \"13-binary_tree_nodes_1\"), compare(\"./13-binary_tree_nodes_1\", \"270/1480/output_1\"), valgrind_error(\"./13-binary_tree_nodes_1\"), valgrind_leak(\"./13-binary_tree_nodes_1\"))", :files=>"270/1480/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"13-binary_tree_nodes.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1480/main_2.c\"], \"13-binary_tree_nodes_2\"), compare(\"./13-binary_tree_nodes_2\", \"270/1480/output_2\"), valgrind_error(\"./13-binary_tree_nodes_2\"), valgrind_leak(\"./13-binary_tree_nodes_2\"))", :files=>"270/1480/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"13-binary_tree_nodes.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1480/main_3.c\"], \"13-binary_tree_nodes_3\"), compare(\"./13-binary_tree_nodes_3\", \"270/1480/output_3\"), valgrind_error(\"./13-binary_tree_nodes_3\"), valgrind_leak(\"./13-binary_tree_nodes_3\"))", :files=>"270/1480/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not perfect tree of max height 4", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"13-binary_tree_nodes.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1480/main_4.c\"], \"13-binary_tree_nodes_4\"), compare(\"./13-binary_tree_nodes_4\", \"270/1480/output_4\"), valgrind_error(\"./13-binary_tree_nodes_4\"), valgrind_leak(\"./13-binary_tree_nodes_4\"))", :files=>"270/1480/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_nodes(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"13-binary_tree_nodes.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1480/main_5.c\"], \"13-binary_tree_nodes_5\"), compare(\"./13-binary_tree_nodes_5\", \"270/1480/output_5\"), valgrind_error(\"./13-binary_tree_nodes_5\"), valgrind_leak(\"./13-binary_tree_nodes_5\"))", :files=>"270/1480/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"13-binary_tree_nodes.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"13-binary_tree_nodes.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"14-binary_tree_balance.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1481/main_0.c\"], \"14-binary_tree_balance_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./14-binary_tree_balance_0\", \"270/1481/output_0\"), valgrind_error(\"./14-binary_tree_balance_0\"), valgrind_leak(\"./14-binary_tree_balance_0\"))", :files=>"270/1481/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1481/main_1.c\"], \"14-binary_tree_balance_1\"), compare(\"./14-binary_tree_balance_1\", \"270/1481/output_1\"), valgrind_error(\"./14-binary_tree_balance_1\"), valgrind_leak(\"./14-binary_tree_balance_1\"))", :files=>"270/1481/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left-height = 2 and right-height = 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1481/main_2.c\"], \"14-binary_tree_balance_2\"), compare(\"./14-binary_tree_balance_2\", \"270/1481/output_2\"), valgrind_error(\"./14-binary_tree_balance_2\"), valgrind_leak(\"./14-binary_tree_balance_2\"))", :files=>"270/1481/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left-height = 2 and right-height = 0", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1481/main_3.c\"], \"14-binary_tree_balance_3\"), compare(\"./14-binary_tree_balance_3\", \"270/1481/output_3\"), valgrind_error(\"./14-binary_tree_balance_3\"), valgrind_leak(\"./14-binary_tree_balance_3\"))", :files=>"270/1481/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left-height = 3 and right-height = 0", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1481/main_4.c\"], \"14-binary_tree_balance_4\"), compare(\"./14-binary_tree_balance_4\", \"270/1481/output_4\"), valgrind_error(\"./14-binary_tree_balance_4\"), valgrind_leak(\"./14-binary_tree_balance_4\"))", :files=>"270/1481/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left-height = 0 and right-height = 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1481/main_5.c\"], \"14-binary_tree_balance_5\"), compare(\"./14-binary_tree_balance_5\", \"270/1481/output_5\"), valgrind_error(\"./14-binary_tree_balance_5\"), valgrind_leak(\"./14-binary_tree_balance_5\"))", :files=>"270/1481/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_balance(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1481/main_6.c\"], \"14-binary_tree_balance_6\"), compare(\"./14-binary_tree_balance_6\", \"270/1481/output_6\"), valgrind_error(\"./14-binary_tree_balance_6\"), valgrind_leak(\"./14-binary_tree_balance_6\"))", :files=>"270/1481/main_6.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"14-binary_tree_balance.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"14-binary_tree_balance.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"15-binary_tree_is_full.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_0.c\"], \"15-binary_tree_is_full_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./15-binary_tree_is_full_0\", \"270/1482/output_0\"), valgrind_error(\"./15-binary_tree_is_full_0\"), valgrind_leak(\"./15-binary_tree_is_full_0\"))", :files=>"270/1482/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_1.c\"], \"15-binary_tree_is_full_1\"), compare(\"./15-binary_tree_is_full_1\", \"270/1482/output_1\"), valgrind_error(\"./15-binary_tree_is_full_1\"), valgrind_leak(\"./15-binary_tree_is_full_1\"))", :files=>"270/1482/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_2.c\"], \"15-binary_tree_is_full_2\"), compare(\"./15-binary_tree_is_full_2\", \"270/1482/output_2\"), valgrind_error(\"./15-binary_tree_is_full_2\"), valgrind_leak(\"./15-binary_tree_is_full_2\"))", :files=>"270/1482/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_3.c\"], \"15-binary_tree_is_full_3\"), compare(\"./15-binary_tree_is_full_3\", \"270/1482/output_3\"), valgrind_error(\"./15-binary_tree_is_full_3\"), valgrind_leak(\"./15-binary_tree_is_full_3\"))", :files=>"270/1482/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not full tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_4.c\"], \"15-binary_tree_is_full_4\"), compare(\"./15-binary_tree_is_full_4\", \"270/1482/output_4\"), valgrind_error(\"./15-binary_tree_is_full_4\"), valgrind_leak(\"./15-binary_tree_is_full_4\"))", :files=>"270/1482/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Full tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_5.c\"], \"15-binary_tree_is_full_5\"), compare(\"./15-binary_tree_is_full_5\", \"270/1482/output_5\"), valgrind_error(\"./15-binary_tree_is_full_5\"), valgrind_leak(\"./15-binary_tree_is_full_5\"))", :files=>"270/1482/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not full tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_6.c\"], \"15-binary_tree_is_full_6\"), compare(\"./15-binary_tree_is_full_6\", \"270/1482/output_6\"), valgrind_error(\"./15-binary_tree_is_full_6\"), valgrind_leak(\"./15-binary_tree_is_full_6\"))", :files=>"270/1482/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Full tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_7.c\"], \"15-binary_tree_is_full_7\"), compare(\"./15-binary_tree_is_full_7\", \"270/1482/output_7\"), valgrind_error(\"./15-binary_tree_is_full_7\"), valgrind_leak(\"./15-binary_tree_is_full_7\"))", :files=>"270/1482/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not full tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_8.c\"], \"15-binary_tree_is_full_8\"), compare(\"./15-binary_tree_is_full_8\", \"270/1482/output_8\"), valgrind_error(\"./15-binary_tree_is_full_8\"), valgrind_leak(\"./15-binary_tree_is_full_8\"))", :files=>"270/1482/main_8.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_is_full(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>19, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"15-binary_tree_is_full.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1482/main_9.c\"], \"15-binary_tree_is_full_9\"), compare(\"./15-binary_tree_is_full_9\", \"270/1482/output_9\"), valgrind_error(\"./15-binary_tree_is_full_9\"), valgrind_leak(\"./15-binary_tree_is_full_9\"))", :files=>"270/1482/main_9.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"15-binary_tree_is_full.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"15-binary_tree_is_full.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"16-binary_tree_is_perfect.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_0.c\"], \"16-binary_tree_is_perfect_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./16-binary_tree_is_perfect_0\", \"270/1483/output_0\"), valgrind_error(\"./16-binary_tree_is_perfect_0\"), valgrind_leak(\"./16-binary_tree_is_perfect_0\"))", :files=>"270/1483/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_1.c\"], \"16-binary_tree_is_perfect_1\"), compare(\"./16-binary_tree_is_perfect_1\", \"270/1483/output_1\"), valgrind_error(\"./16-binary_tree_is_perfect_1\"), valgrind_leak(\"./16-binary_tree_is_perfect_1\"))", :files=>"270/1483/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_2.c\"], \"16-binary_tree_is_perfect_2\"), compare(\"./16-binary_tree_is_perfect_2\", \"270/1483/output_2\"), valgrind_error(\"./16-binary_tree_is_perfect_2\"), valgrind_leak(\"./16-binary_tree_is_perfect_2\"))", :files=>"270/1483/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_3.c\"], \"16-binary_tree_is_perfect_3\"), compare(\"./16-binary_tree_is_perfect_3\", \"270/1483/output_3\"), valgrind_error(\"./16-binary_tree_is_perfect_3\"), valgrind_leak(\"./16-binary_tree_is_perfect_3\"))", :files=>"270/1483/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not perfect tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_4.c\"], \"16-binary_tree_is_perfect_4\"), compare(\"./16-binary_tree_is_perfect_4\", \"270/1483/output_4\"), valgrind_error(\"./16-binary_tree_is_perfect_4\"), valgrind_leak(\"./16-binary_tree_is_perfect_4\"))", :files=>"270/1483/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Full tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_5.c\"], \"16-binary_tree_is_perfect_5\"), compare(\"./16-binary_tree_is_perfect_5\", \"270/1483/output_5\"), valgrind_error(\"./16-binary_tree_is_perfect_5\"), valgrind_leak(\"./16-binary_tree_is_perfect_5\"))", :files=>"270/1483/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not perfect tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_6.c\"], \"16-binary_tree_is_perfect_6\"), compare(\"./16-binary_tree_is_perfect_6\", \"270/1483/output_6\"), valgrind_error(\"./16-binary_tree_is_perfect_6\"), valgrind_leak(\"./16-binary_tree_is_perfect_6\"))", :files=>"270/1483/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Full tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_7.c\"], \"16-binary_tree_is_perfect_7\"), compare(\"./16-binary_tree_is_perfect_7\", \"270/1483/output_7\"), valgrind_error(\"./16-binary_tree_is_perfect_7\"), valgrind_leak(\"./16-binary_tree_is_perfect_7\"))", :files=>"270/1483/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not perfect tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_8.c\"], \"16-binary_tree_is_perfect_8\"), compare(\"./16-binary_tree_is_perfect_8\", \"270/1483/output_8\"), valgrind_error(\"./16-binary_tree_is_perfect_8\"), valgrind_leak(\"./16-binary_tree_is_perfect_8\"))", :files=>"270/1483/main_8.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_is_perfect(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>19, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"16-binary_tree_is_perfect.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1483/main_9.c\"], \"16-binary_tree_is_perfect_9\"), compare(\"./16-binary_tree_is_perfect_9\", \"270/1483/output_9\"), valgrind_error(\"./16-binary_tree_is_perfect_9\"), valgrind_leak(\"./16-binary_tree_is_perfect_9\"))", :files=>"270/1483/main_9.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"16-binary_tree_is_perfect.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"16-binary_tree_is_perfect.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"17-binary_tree_sibling.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"17-binary_tree_sibling.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1558/main_0.c\"], \"17-binary_tree_sibling_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3. Find the sibling of a node with depth of 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./17-binary_tree_sibling_0\", \"270/1558/output_0\"), valgrind_error(\"./17-binary_tree_sibling_0\"), valgrind_leak(\"./17-binary_tree_sibling_0\"))", :files=>"270/1558/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3. Find the sibling of a node with depth of 2 (mirror)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"17-binary_tree_sibling.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1558/main_1.c\"], \"17-binary_tree_sibling_1\"), compare(\"./17-binary_tree_sibling_1\", \"270/1558/output_1\"), valgrind_error(\"./17-binary_tree_sibling_1\"), valgrind_leak(\"./17-binary_tree_sibling_1\"))", :files=>"270/1558/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3. Find the sibling of a node with depth of 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"17-binary_tree_sibling.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1558/main_2.c\"], \"17-binary_tree_sibling_2\"), compare(\"./17-binary_tree_sibling_2\", \"270/1558/output_2\"), valgrind_error(\"./17-binary_tree_sibling_2\"), valgrind_leak(\"./17-binary_tree_sibling_2\"))", :files=>"270/1558/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3. Find the sibling of a node with depth of 3 (mirror)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"17-binary_tree_sibling.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1558/main_3.c\"], \"17-binary_tree_sibling_3\"), compare(\"./17-binary_tree_sibling_3\", \"270/1558/output_3\"), valgrind_error(\"./17-binary_tree_sibling_3\"), valgrind_leak(\"./17-binary_tree_sibling_3\"))", :files=>"270/1558/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left child with no sibling", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"17-binary_tree_sibling.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1558/main_4.c\"], \"17-binary_tree_sibling_4\"), compare(\"./17-binary_tree_sibling_4\", \"270/1558/output_4\"), valgrind_error(\"./17-binary_tree_sibling_4\"), valgrind_leak(\"./17-binary_tree_sibling_4\"))", :files=>"270/1558/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Right child with no sibling", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"17-binary_tree_sibling.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1558/main_5.c\"], \"17-binary_tree_sibling_5\"), compare(\"./17-binary_tree_sibling_5\", \"270/1558/output_5\"), valgrind_error(\"./17-binary_tree_sibling_5\"), valgrind_leak(\"./17-binary_tree_sibling_5\"))", :files=>"270/1558/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Root node (no parent)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"17-binary_tree_sibling.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1558/main_6.c\"], \"17-binary_tree_sibling_6\"), compare(\"./17-binary_tree_sibling_6\", \"270/1558/output_6\"), valgrind_error(\"./17-binary_tree_sibling_6\"), valgrind_leak(\"./17-binary_tree_sibling_6\"))", :files=>"270/1558/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_sibling(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"17-binary_tree_sibling.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1558/main_7.c\"], \"17-binary_tree_sibling_7\"), compare(\"./17-binary_tree_sibling_7\", \"270/1558/output_7\"), valgrind_error(\"./17-binary_tree_sibling_7\"), valgrind_leak(\"./17-binary_tree_sibling_7\"))", :files=>"270/1558/main_7.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"17-binary_tree_sibling.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"17-binary_tree_sibling.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"18-binary_tree_uncle.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_0.c\"], \"18-binary_tree_uncle_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3. Find the uncle of a node with depth of 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./18-binary_tree_uncle_0\", \"270/1559/output_0\"), valgrind_error(\"./18-binary_tree_uncle_0\"), valgrind_leak(\"./18-binary_tree_uncle_0\"))", :files=>"270/1559/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3. Find the uncle of a node with depth of 2 (mirror)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_1.c\"], \"18-binary_tree_uncle_1\"), compare(\"./18-binary_tree_uncle_1\", \"270/1559/output_1\"), valgrind_error(\"./18-binary_tree_uncle_1\"), valgrind_leak(\"./18-binary_tree_uncle_1\"))", :files=>"270/1559/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3. Find the uncle of a node with depth of 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_2.c\"], \"18-binary_tree_uncle_2\"), compare(\"./18-binary_tree_uncle_2\", \"270/1559/output_2\"), valgrind_error(\"./18-binary_tree_uncle_2\"), valgrind_leak(\"./18-binary_tree_uncle_2\"))", :files=>"270/1559/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3. Find the uncle of a node with depth of 3 (mirror)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_3.c\"], \"18-binary_tree_uncle_3\"), compare(\"./18-binary_tree_uncle_3\", \"270/1559/output_3\"), valgrind_error(\"./18-binary_tree_uncle_3\"), valgrind_leak(\"./18-binary_tree_uncle_3\"))", :files=>"270/1559/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left child with no uncle", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_4.c\"], \"18-binary_tree_uncle_4\"), compare(\"./18-binary_tree_uncle_4\", \"270/1559/output_4\"), valgrind_error(\"./18-binary_tree_uncle_4\"), valgrind_leak(\"./18-binary_tree_uncle_4\"))", :files=>"270/1559/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Right child with no uncle", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_5.c\"], \"18-binary_tree_uncle_5\"), compare(\"./18-binary_tree_uncle_5\", \"270/1559/output_5\"), valgrind_error(\"./18-binary_tree_uncle_5\"), valgrind_leak(\"./18-binary_tree_uncle_5\"))", :files=>"270/1559/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left child of root node (no grand parent)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_6.c\"], \"18-binary_tree_uncle_6\"), compare(\"./18-binary_tree_uncle_6\", \"270/1559/output_6\"), valgrind_error(\"./18-binary_tree_uncle_6\"), valgrind_leak(\"./18-binary_tree_uncle_6\"))", :files=>"270/1559/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Right child of root node (no grand parent)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_7.c\"], \"18-binary_tree_uncle_7\"), compare(\"./18-binary_tree_uncle_7\", \"270/1559/output_7\"), valgrind_error(\"./18-binary_tree_uncle_7\"), valgrind_leak(\"./18-binary_tree_uncle_7\"))", :files=>"270/1559/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Root node (no parent)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_8.c\"], \"18-binary_tree_uncle_8\"), compare(\"./18-binary_tree_uncle_8\", \"270/1559/output_8\"), valgrind_error(\"./18-binary_tree_uncle_8\"), valgrind_leak(\"./18-binary_tree_uncle_8\"))", :files=>"270/1559/main_8.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_uncle(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>19, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"18-binary_tree_uncle.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1559/main_9.c\"], \"18-binary_tree_uncle_9\"), compare(\"./18-binary_tree_uncle_9\", \"270/1559/output_9\"), valgrind_error(\"./18-binary_tree_uncle_9\"), valgrind_leak(\"./18-binary_tree_uncle_9\"))", :files=>"270/1559/main_9.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"18-binary_tree_uncle.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"18-binary_tree_uncle.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"100-binary_trees_ancestor.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_0.c\"], \"100-binary_trees_ancestor_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Two times the same node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./100-binary_trees_ancestor_0\", \"270/1485/output_0\"), valgrind_error(\"./100-binary_trees_ancestor_0\"), valgrind_leak(\"./100-binary_trees_ancestor_0\"))", :files=>"270/1485/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: One of the two nodes is the lowest common ancestor", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_1.c\"], \"100-binary_trees_ancestor_1\"), compare(\"./100-binary_trees_ancestor_1\", \"270/1485/output_1\"), valgrind_error(\"./100-binary_trees_ancestor_1\"), valgrind_leak(\"./100-binary_trees_ancestor_1\"))", :files=>"270/1485/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: One of the two nodes is the lowest common ancestor (mirror)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_2.c\"], \"100-binary_trees_ancestor_2\"), compare(\"./100-binary_trees_ancestor_2\", \"270/1485/output_2\"), valgrind_error(\"./100-binary_trees_ancestor_2\"), valgrind_leak(\"./100-binary_trees_ancestor_2\"))", :files=>"270/1485/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Most left child and most right child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_3.c\"], \"100-binary_trees_ancestor_3\"), compare(\"./100-binary_trees_ancestor_3\", \"270/1485/output_3\"), valgrind_error(\"./100-binary_trees_ancestor_3\"), valgrind_leak(\"./100-binary_trees_ancestor_3\"))", :files=>"270/1485/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Most right child of left and most left child of right", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_4.c\"], \"100-binary_trees_ancestor_4\"), compare(\"./100-binary_trees_ancestor_4\", \"270/1485/output_4\"), valgrind_error(\"./100-binary_trees_ancestor_4\"), valgrind_leak(\"./100-binary_trees_ancestor_4\"))", :files=>"270/1485/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Two nodes not in the same tree", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_5.c\"], \"100-binary_trees_ancestor_5\"), compare(\"./100-binary_trees_ancestor_5\", \"270/1485/output_5\"), valgrind_error(\"./100-binary_trees_ancestor_5\"), valgrind_leak(\"./100-binary_trees_ancestor_5\"))", :files=>"270/1485/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_trees_ancestor(first, NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_6.c\"], \"100-binary_trees_ancestor_6\"), compare(\"./100-binary_trees_ancestor_6\", \"270/1485/output_6\"), valgrind_error(\"./100-binary_trees_ancestor_6\"), valgrind_leak(\"./100-binary_trees_ancestor_6\"))", :files=>"270/1485/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_trees_ancestor(NULL, second);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_7.c\"], \"100-binary_trees_ancestor_7\"), compare(\"./100-binary_trees_ancestor_7\", \"270/1485/output_7\"), valgrind_error(\"./100-binary_trees_ancestor_7\"), valgrind_leak(\"./100-binary_trees_ancestor_7\"))", :files=>"270/1485/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_trees_ancestor(NULL, NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"100-binary_trees_ancestor.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1485/main_8.c\"], \"100-binary_trees_ancestor_8\"), compare(\"./100-binary_trees_ancestor_8\", \"270/1485/output_8\"), valgrind_error(\"./100-binary_trees_ancestor_8\"), valgrind_leak(\"./100-binary_trees_ancestor_8\"))", :files=>"270/1485/main_8.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"100-binary_trees_ancestor.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"100-binary_trees_ancestor.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"101-binary_tree_levelorder.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"101-binary_tree_levelorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1536/main_0.c\"], \"101-binary_tree_levelorder_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./101-binary_tree_levelorder_0\", \"270/1536/output_0\"), valgrind_error(\"./101-binary_tree_levelorder_0\"), valgrind_leak(\"./101-binary_tree_levelorder_0\"))", :files=>"270/1536/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"101-binary_tree_levelorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1536/main_1.c\"], \"101-binary_tree_levelorder_1\"), compare(\"./101-binary_tree_levelorder_1\", \"270/1536/output_1\"), valgrind_error(\"./101-binary_tree_levelorder_1\"), valgrind_leak(\"./101-binary_tree_levelorder_1\"))", :files=>"270/1536/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"101-binary_tree_levelorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1536/main_2.c\"], \"101-binary_tree_levelorder_2\"), compare(\"./101-binary_tree_levelorder_2\", \"270/1536/output_2\"), valgrind_error(\"./101-binary_tree_levelorder_2\"), valgrind_leak(\"./101-binary_tree_levelorder_2\"))", :files=>"270/1536/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"101-binary_tree_levelorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1536/main_3.c\"], \"101-binary_tree_levelorder_3\"), compare(\"./101-binary_tree_levelorder_3\", \"270/1536/output_3\"), valgrind_error(\"./101-binary_tree_levelorder_3\"), valgrind_leak(\"./101-binary_tree_levelorder_3\"))", :files=>"270/1536/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_levelorder(NULL, &_func);` where `_func` is a valid pointer", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"101-binary_tree_levelorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1536/main_4.c\"], \"101-binary_tree_levelorder_4\"), compare(\"./101-binary_tree_levelorder_4\", \"270/1536/output_4\"), valgrind_error(\"./101-binary_tree_levelorder_4\"), valgrind_leak(\"./101-binary_tree_levelorder_4\"))", :files=>"270/1536/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_levelorder(root, NULL);` where `root` is a valid pointer", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"101-binary_tree_levelorder.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1536/main_5.c\"], \"101-binary_tree_levelorder_5\"), compare(\"./101-binary_tree_levelorder_5\", \"270/1536/output_5\"), valgrind_error(\"./101-binary_tree_levelorder_5\"), valgrind_leak(\"./101-binary_tree_levelorder_5\"))", :files=>"270/1536/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"101-binary_tree_levelorder.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"101-binary_tree_levelorder.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"102-binary_tree_is_complete.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_0.c\"], \"102-binary_tree_is_complete_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./102-binary_tree_is_complete_0\", \"270/1545/output_0\"), valgrind_error(\"./102-binary_tree_is_complete_0\"), valgrind_leak(\"./102-binary_tree_is_complete_0\"))", :files=>"270/1545/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_1.c\"], \"102-binary_tree_is_complete_1\"), compare(\"./102-binary_tree_is_complete_1\", \"270/1545/output_1\"), valgrind_error(\"./102-binary_tree_is_complete_1\"), valgrind_leak(\"./102-binary_tree_is_complete_1\"))", :files=>"270/1545/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_2.c\"], \"102-binary_tree_is_complete_2\"), compare(\"./102-binary_tree_is_complete_2\", \"270/1545/output_2\"), valgrind_error(\"./102-binary_tree_is_complete_2\"), valgrind_leak(\"./102-binary_tree_is_complete_2\"))", :files=>"270/1545/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_3.c\"], \"102-binary_tree_is_complete_3\"), compare(\"./102-binary_tree_is_complete_3\", \"270/1545/output_3\"), valgrind_error(\"./102-binary_tree_is_complete_3\"), valgrind_leak(\"./102-binary_tree_is_complete_3\"))", :files=>"270/1545/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_4.c\"], \"102-binary_tree_is_complete_4\"), compare(\"./102-binary_tree_is_complete_4\", \"270/1545/output_4\"), valgrind_error(\"./102-binary_tree_is_complete_4\"), valgrind_leak(\"./102-binary_tree_is_complete_4\"))", :files=>"270/1545/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_5.c\"], \"102-binary_tree_is_complete_5\"), compare(\"./102-binary_tree_is_complete_5\", \"270/1545/output_5\"), valgrind_error(\"./102-binary_tree_is_complete_5\"), valgrind_leak(\"./102-binary_tree_is_complete_5\"))", :files=>"270/1545/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_6.c\"], \"102-binary_tree_is_complete_6\"), compare(\"./102-binary_tree_is_complete_6\", \"270/1545/output_6\"), valgrind_error(\"./102-binary_tree_is_complete_6\"), valgrind_leak(\"./102-binary_tree_is_complete_6\"))", :files=>"270/1545/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_7.c\"], \"102-binary_tree_is_complete_7\"), compare(\"./102-binary_tree_is_complete_7\", \"270/1545/output_7\"), valgrind_error(\"./102-binary_tree_is_complete_7\"), valgrind_leak(\"./102-binary_tree_is_complete_7\"))", :files=>"270/1545/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_8.c\"], \"102-binary_tree_is_complete_8\"), compare(\"./102-binary_tree_is_complete_8\", \"270/1545/output_8\"), valgrind_error(\"./102-binary_tree_is_complete_8\"), valgrind_leak(\"./102-binary_tree_is_complete_8\"))", :files=>"270/1545/main_8.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_is_complete(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>19, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"102-binary_tree_is_complete.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1545/main_9.c\"], \"102-binary_tree_is_complete_9\"), compare(\"./102-binary_tree_is_complete_9\", \"270/1545/output_9\"), valgrind_error(\"./102-binary_tree_is_complete_9\"), valgrind_leak(\"./102-binary_tree_is_complete_9\"))", :files=>"270/1545/main_9.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"102-binary_tree_is_complete.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"102-binary_tree_is_complete.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"103-binary_tree_rotate_left.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"103-binary_tree_rotate_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1505/main_0.c\"], \"103-binary_tree_rotate_left_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Right right case", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./103-binary_tree_rotate_left_0\", \"270/1505/output_0\"), valgrind_error(\"./103-binary_tree_rotate_left_0\"), valgrind_leak(\"./103-binary_tree_rotate_left_0\"))", :files=>"270/1505/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Right right case 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"103-binary_tree_rotate_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1505/main_1.c\"], \"103-binary_tree_rotate_left_1\"), compare(\"./103-binary_tree_rotate_left_1\", \"270/1505/output_1\"), valgrind_error(\"./103-binary_tree_rotate_left_1\"), valgrind_leak(\"./103-binary_tree_rotate_left_1\"))", :files=>"270/1505/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Right right case 3. Right child has left child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"103-binary_tree_rotate_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1505/main_2.c\"], \"103-binary_tree_rotate_left_2\"), compare(\"./103-binary_tree_rotate_left_2\", \"270/1505/output_2\"), valgrind_error(\"./103-binary_tree_rotate_left_2\"), valgrind_leak(\"./103-binary_tree_rotate_left_2\"))", :files=>"270/1505/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Right right case 4. Root has left child, and right child has left child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"103-binary_tree_rotate_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1505/main_3.c\"], \"103-binary_tree_rotate_left_3\"), compare(\"./103-binary_tree_rotate_left_3\", \"270/1505/output_3\"), valgrind_error(\"./103-binary_tree_rotate_left_3\"), valgrind_leak(\"./103-binary_tree_rotate_left_3\"))", :files=>"270/1505/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_rotate_left(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"103-binary_tree_rotate_left.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1505/main_4.c\"], \"103-binary_tree_rotate_left_4\"), compare(\"./103-binary_tree_rotate_left_4\", \"270/1505/output_4\"), valgrind_error(\"./103-binary_tree_rotate_left_4\"), valgrind_leak(\"./103-binary_tree_rotate_left_4\"))", :files=>"270/1505/main_4.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"103-binary_tree_rotate_left.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"103-binary_tree_rotate_left.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"104-binary_tree_rotate_right.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1506/main_0.c\"], \"104-binary_tree_rotate_right_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Left left case", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./104-binary_tree_rotate_right_0\", \"270/1506/output_0\"), valgrind_error(\"./104-binary_tree_rotate_right_0\"), valgrind_leak(\"./104-binary_tree_rotate_right_0\"))", :files=>"270/1506/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left left case 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1506/main_1.c\"], \"104-binary_tree_rotate_right_1\"), compare(\"./104-binary_tree_rotate_right_1\", \"270/1506/output_1\"), valgrind_error(\"./104-binary_tree_rotate_right_1\"), valgrind_leak(\"./104-binary_tree_rotate_right_1\"))", :files=>"270/1506/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left left case 3. Left child has right child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1506/main_2.c\"], \"104-binary_tree_rotate_right_2\"), compare(\"./104-binary_tree_rotate_right_2\", \"270/1506/output_2\"), valgrind_error(\"./104-binary_tree_rotate_right_2\"), valgrind_leak(\"./104-binary_tree_rotate_right_2\"))", :files=>"270/1506/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left left case 4. Root has right child, and left child has right child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1506/main_3.c\"], \"104-binary_tree_rotate_right_3\"), compare(\"./104-binary_tree_rotate_right_3\", \"270/1506/output_3\"), valgrind_error(\"./104-binary_tree_rotate_right_3\"), valgrind_leak(\"./104-binary_tree_rotate_right_3\"))", :files=>"270/1506/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_rotate_right(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1506/main_4.c\"], \"104-binary_tree_rotate_right_4\"), compare(\"./104-binary_tree_rotate_right_4\", \"270/1506/output_4\"), valgrind_error(\"./104-binary_tree_rotate_right_4\"), valgrind_leak(\"./104-binary_tree_rotate_right_4\"))", :files=>"270/1506/main_4.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"104-binary_tree_rotate_right.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"104-binary_tree_rotate_right.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"110-binary_tree_is_bst.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_0.c\"], \"110-binary_tree_is_bst_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./110-binary_tree_is_bst_0\", \"270/1552/output_0\"), valgrind_error(\"./110-binary_tree_is_bst_0\"), valgrind_leak(\"./110-binary_tree_is_bst_0\"))", :files=>"270/1552/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_1.c\"], \"110-binary_tree_is_bst_1\"), compare(\"./110-binary_tree_is_bst_1\", \"270/1552/output_1\"), valgrind_error(\"./110-binary_tree_is_bst_1\"), valgrind_leak(\"./110-binary_tree_is_bst_1\"))", :files=>"270/1552/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_2.c\"], \"110-binary_tree_is_bst_2\"), compare(\"./110-binary_tree_is_bst_2\", \"270/1552/output_2\"), valgrind_error(\"./110-binary_tree_is_bst_2\"), valgrind_leak(\"./110-binary_tree_is_bst_2\"))", :files=>"270/1552/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_3.c\"], \"110-binary_tree_is_bst_3\"), compare(\"./110-binary_tree_is_bst_3\", \"270/1552/output_3\"), valgrind_error(\"./110-binary_tree_is_bst_3\"), valgrind_leak(\"./110-binary_tree_is_bst_3\"))", :files=>"270/1552/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: One value in right subtree is lower than root node value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_4.c\"], \"110-binary_tree_is_bst_4\"), compare(\"./110-binary_tree_is_bst_4\", \"270/1552/output_4\"), valgrind_error(\"./110-binary_tree_is_bst_4\"), valgrind_leak(\"./110-binary_tree_is_bst_4\"))", :files=>"270/1552/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: One value in left subtree is greater than root node value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_5.c\"], \"110-binary_tree_is_bst_5\"), compare(\"./110-binary_tree_is_bst_5\", \"270/1552/output_5\"), valgrind_error(\"./110-binary_tree_is_bst_5\"), valgrind_leak(\"./110-binary_tree_is_bst_5\"))", :files=>"270/1552/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Duplicated value on left subtree", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_6.c\"], \"110-binary_tree_is_bst_6\"), compare(\"./110-binary_tree_is_bst_6\", \"270/1552/output_6\"), valgrind_error(\"./110-binary_tree_is_bst_6\"), valgrind_leak(\"./110-binary_tree_is_bst_6\"))", :files=>"270/1552/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Duplicated value on right subtree", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_7.c\"], \"110-binary_tree_is_bst_7\"), compare(\"./110-binary_tree_is_bst_7\", \"270/1552/output_7\"), valgrind_error(\"./110-binary_tree_is_bst_7\"), valgrind_leak(\"./110-binary_tree_is_bst_7\"))", :files=>"270/1552/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_is_bst(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"110-binary_tree_is_bst.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1552/main_8.c\"], \"110-binary_tree_is_bst_8\"), compare(\"./110-binary_tree_is_bst_8\", \"270/1552/output_8\"), valgrind_error(\"./110-binary_tree_is_bst_8\"), valgrind_leak(\"./110-binary_tree_is_bst_8\"))", :files=>"270/1552/main_8.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"110-binary_tree_is_bst.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"110-binary_tree_is_bst.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"111-bst_insert.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1486/main_0.c\"], \"111-bst_insert_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert a single value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./111-bst_insert_0\", \"270/1486/output_0\"), valgrind_error(\"./111-bst_insert_0\"), valgrind_leak(\"./111-bst_insert_0\"))", :files=>"270/1486/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 3 different values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1486/main_1.c\"], \"111-bst_insert_1\"), compare(\"./111-bst_insert_1\", \"270/1486/output_1\"), valgrind_error(\"./111-bst_insert_1\"), valgrind_leak(\"./111-bst_insert_1\"))", :files=>"270/1486/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 9 different values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1486/main_2.c\"], \"111-bst_insert_2\"), compare(\"./111-bst_insert_2\", \"270/1486/output_2\"), valgrind_error(\"./111-bst_insert_2\"), valgrind_leak(\"./111-bst_insert_2\"))", :files=>"270/1486/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 50 different values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1486/main_3.c\"], \"111-bst_insert_3\"), compare(\"./111-bst_insert_3\", \"270/1486/output_3\"), valgrind_error(\"./111-bst_insert_3\"), valgrind_leak(\"./111-bst_insert_3\"))", :files=>"270/1486/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 11 different values + 1 duplicate", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1486/main_4.c\"], \"111-bst_insert_4\"), compare(\"./111-bst_insert_4\", \"270/1486/output_4\"), valgrind_error(\"./111-bst_insert_4\"), valgrind_leak(\"./111-bst_insert_4\"))", :files=>"270/1486/main_4.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./111-bst_insert_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"111-bst_insert.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"111-bst_insert.c\", \"0-binary_tree_node.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1487/main_0.c\"], \"112-array_to_bst_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Array of size 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./112-array_to_bst_0\", \"270/1487/output_0\"), valgrind_error(\"./112-array_to_bst_0\"), valgrind_leak(\"./112-array_to_bst_0\"))", :files=>"270/1487/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array of size 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1487/main_1.c\"], \"112-array_to_bst_1\"), compare(\"./112-array_to_bst_1\", \"270/1487/output_1\"), valgrind_error(\"./112-array_to_bst_1\"), valgrind_leak(\"./112-array_to_bst_1\"))", :files=>"270/1487/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array of size 9", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1487/main_2.c\"], \"112-array_to_bst_2\"), compare(\"./112-array_to_bst_2\", \"270/1487/output_2\"), valgrind_error(\"./112-array_to_bst_2\"), valgrind_leak(\"./112-array_to_bst_2\"))", :files=>"270/1487/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array pf size 50", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1487/main_3.c\"], \"112-array_to_bst_3\"), compare(\"./112-array_to_bst_3\", \"270/1487/output_3\"), valgrind_error(\"./112-array_to_bst_3\"), valgrind_leak(\"./112-array_to_bst_3\"))", :files=>"270/1487/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array of size 13 with one duplicated value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1487/main_4.c\"], \"112-array_to_bst_4\"), compare(\"./112-array_to_bst_4\", \"270/1487/output_4\"), valgrind_error(\"./112-array_to_bst_4\"), valgrind_leak(\"./112-array_to_bst_4\"))", :files=>"270/1487/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `array_to_bst(NULL, 0);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1487/main_5.c\"], \"112-array_to_bst_5\"), compare(\"./112-array_to_bst_5\", \"270/1487/output_5\"), valgrind_error(\"./112-array_to_bst_5\"), valgrind_leak(\"./112-array_to_bst_5\"))", :files=>"270/1487/main_5.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./112-array_to_bst_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"112-array_to_bst.c\", \"111-bst_insert.c\", \"0-binary_tree_node.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"113-bst_search.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"113-bst_search.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/helpers/_bst_search.c\", \"270/1502/main_0.c\"], \"113-bst_search_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Search an existing node in tree of max height 4", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./113-bst_search_0\", \"270/1502/output_0\"), valgrind_error(\"./113-bst_search_0\"))", :files=>"270/1502/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Search an existing node in tree of max height 4", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"113-bst_search.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/helpers/_bst_search.c\", \"270/1502/main_1.c\"], \"113-bst_search_1\"), compare(\"./113-bst_search_1\", \"270/1502/output_1\"), valgrind_error(\"./113-bst_search_1\"))", :files=>"270/1502/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Search an existing node in tree of max height 4", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"113-bst_search.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/helpers/_bst_search.c\", \"270/1502/main_2.c\"], \"113-bst_search_2\"), compare(\"./113-bst_search_2\", \"270/1502/output_2\"), valgrind_error(\"./113-bst_search_2\"))", :files=>"270/1502/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Search a value not in a tree of max height 4", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"113-bst_search.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/helpers/_bst_search.c\", \"270/1502/main_3.c\"], \"113-bst_search_3\"), compare(\"./113-bst_search_3\", \"270/1502/output_3\"), valgrind_error(\"./113-bst_search_3\"))", :files=>"270/1502/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `bst_search(NULL, 12);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"113-bst_search.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/helpers/_bst_search.c\", \"270/binary_tree_print.c\", \"270/1502/main_4.c\"], \"113-bst_search_4\"), compare(\"./113-bst_search_4\", \"270/1502/output_4\"), valgrind_error(\"./113-bst_search_4\"))", :files=>"270/1502/main_4.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"113-bst_search.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"113-bst_search.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"114-bst_remove.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"114-bst_remove.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/1503/main_0.c\"], \"114-bst_remove_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove a leaf", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./114-bst_remove_0\", \"270/1503/output_0\"), valgrind_error(\"./114-bst_remove_0\"))", :files=>"270/1503/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove a node with both left and right children", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"114-bst_remove.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/1503/main_1.c\"], \"114-bst_remove_1\"), compare(\"./114-bst_remove_1\", \"270/1503/output_1\"), valgrind_error(\"./114-bst_remove_1\"))", :files=>"270/1503/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove a node with only a left child", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"114-bst_remove.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/1503/main_2.c\"], \"114-bst_remove_2\"), compare(\"./114-bst_remove_2\", \"270/1503/output_2\"), valgrind_error(\"./114-bst_remove_2\"))", :files=>"270/1503/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove the root node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"114-bst_remove.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/1503/main_3.c\"], \"114-bst_remove_3\"), compare(\"./114-bst_remove_3\", \"270/1503/output_3\"), valgrind_error(\"./114-bst_remove_3\"))", :files=>"270/1503/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `bst_remove(NULL, 12);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"114-bst_remove.c\", \"270/binary_tree_print.c\", \"270/helpers/_array_to_bst.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_bst_insert.c\", \"270/1503/main_4.c\"], \"114-bst_remove_4\"), compare(\"./114-bst_remove_4\", \"270/1503/output_4\"), valgrind_error(\"./114-bst_remove_4\"))", :files=>"270/1503/main_4.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"114-bst_remove.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"114-bst_remove.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"115-O\"])"}]}, {:concept_id=>26, :body=>"Correct values", :points=>3, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"compare(\"cat 115-O\", \"270/1504/115-O\")"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"120-binary_tree_is_avl.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_0.c\"], \"120-binary_tree_is_avl_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./120-binary_tree_is_avl_0\", \"270/1553/output_0\"), valgrind_error(\"./120-binary_tree_is_avl_0\"), valgrind_leak(\"./120-binary_tree_is_avl_0\"))", :files=>"270/1553/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect BST of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_1.c\"], \"120-binary_tree_is_avl_1\"), compare(\"./120-binary_tree_is_avl_1\", \"270/1553/output_1\"), valgrind_error(\"./120-binary_tree_is_avl_1\"), valgrind_leak(\"./120-binary_tree_is_avl_1\"))", :files=>"270/1553/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect BST of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_2.c\"], \"120-binary_tree_is_avl_2\"), compare(\"./120-binary_tree_is_avl_2\", \"270/1553/output_2\"), valgrind_error(\"./120-binary_tree_is_avl_2\"), valgrind_leak(\"./120-binary_tree_is_avl_2\"))", :files=>"270/1553/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect BST of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_3.c\"], \"120-binary_tree_is_avl_3\"), compare(\"./120-binary_tree_is_avl_3\", \"270/1553/output_3\"), valgrind_error(\"./120-binary_tree_is_avl_3\"), valgrind_leak(\"./120-binary_tree_is_avl_3\"))", :files=>"270/1553/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: One value in right subtree is lower than root node value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_4.c\"], \"120-binary_tree_is_avl_4\"), compare(\"./120-binary_tree_is_avl_4\", \"270/1553/output_4\"), valgrind_error(\"./120-binary_tree_is_avl_4\"), valgrind_leak(\"./120-binary_tree_is_avl_4\"))", :files=>"270/1553/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: One value in left subtree is greater than root node value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_5.c\"], \"120-binary_tree_is_avl_5\"), compare(\"./120-binary_tree_is_avl_5\", \"270/1553/output_5\"), valgrind_error(\"./120-binary_tree_is_avl_5\"), valgrind_leak(\"./120-binary_tree_is_avl_5\"))", :files=>"270/1553/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Duplicated value in left subtree", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_6.c\"], \"120-binary_tree_is_avl_6\"), compare(\"./120-binary_tree_is_avl_6\", \"270/1553/output_6\"), valgrind_error(\"./120-binary_tree_is_avl_6\"), valgrind_leak(\"./120-binary_tree_is_avl_6\"))", :files=>"270/1553/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Duplicated value in right subtree", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_7.c\"], \"120-binary_tree_is_avl_7\"), compare(\"./120-binary_tree_is_avl_7\", \"270/1553/output_7\"), valgrind_error(\"./120-binary_tree_is_avl_7\"), valgrind_leak(\"./120-binary_tree_is_avl_7\"))", :files=>"270/1553/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Balance factor lower than -1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_8.c\"], \"120-binary_tree_is_avl_8\"), compare(\"./120-binary_tree_is_avl_8\", \"270/1553/output_8\"), valgrind_error(\"./120-binary_tree_is_avl_8\"), valgrind_leak(\"./120-binary_tree_is_avl_8\"))", :files=>"270/1553/main_8.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Balance factor greater than +1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>19, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_9.c\"], \"120-binary_tree_is_avl_9\"), compare(\"./120-binary_tree_is_avl_9\", \"270/1553/output_9\"), valgrind_error(\"./120-binary_tree_is_avl_9\"), valgrind_leak(\"./120-binary_tree_is_avl_9\"))", :files=>"270/1553/main_9.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Balance factor of left subtree greater than +1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_10.c\"], \"120-binary_tree_is_avl_10\"), compare(\"./120-binary_tree_is_avl_10\", \"270/1553/output_10\"), valgrind_error(\"./120-binary_tree_is_avl_10\"), valgrind_leak(\"./120-binary_tree_is_avl_10\"))", :files=>"270/1553/main_10.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Balance factor of right subtree lower than -1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>21, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_11.c\"], \"120-binary_tree_is_avl_11\"), compare(\"./120-binary_tree_is_avl_11\", \"270/1553/output_11\"), valgrind_error(\"./120-binary_tree_is_avl_11\"), valgrind_leak(\"./120-binary_tree_is_avl_11\"))", :files=>"270/1553/main_11.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_is_avl(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>22, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"120-binary_tree_is_avl.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_binary_tree_node.c\", \"270/1553/main_12.c\"], \"120-binary_tree_is_avl_12\"), compare(\"./120-binary_tree_is_avl_12\", \"270/1553/output_12\"), valgrind_error(\"./120-binary_tree_is_avl_12\"), valgrind_leak(\"./120-binary_tree_is_avl_12\"))", :files=>"270/1553/main_12.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"120-binary_tree_is_avl.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"120-binary_tree_is_avl.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1507/main_0.c\"], \"121-avl_insert_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert a single value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./121-avl_insert_0\", \"270/1507/output_0\"), valgrind_error(\"./121-avl_insert_0\"), valgrind_leak(\"./121-avl_insert_0\"))", :files=>"270/1507/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 3 values. No rotation needed", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1507/main_1.c\"], \"121-avl_insert_1\"), compare(\"./121-avl_insert_1\", \"270/1507/output_1\"), valgrind_error(\"./121-avl_insert_1\"), valgrind_leak(\"./121-avl_insert_1\"))", :files=>"270/1507/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 9 values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1507/main_2.c\"], \"121-avl_insert_2\"), compare(\"./121-avl_insert_2\", \"270/1507/output_2\"), valgrind_error(\"./121-avl_insert_2\"), valgrind_leak(\"./121-avl_insert_2\"))", :files=>"270/1507/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 50 values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1507/main_3.c\"], \"121-avl_insert_3\"), compare(\"./121-avl_insert_3\", \"270/1507/output_3\"), valgrind_error(\"./121-avl_insert_3\"), valgrind_leak(\"./121-avl_insert_3\"))", :files=>"270/1507/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 15 values in ascending order", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1507/main_4.c\"], \"121-avl_insert_4\"), compare(\"./121-avl_insert_4\", \"270/1507/output_4\"), valgrind_error(\"./121-avl_insert_4\"), valgrind_leak(\"./121-avl_insert_4\"))", :files=>"270/1507/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 15 value in descending order", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1507/main_5.c\"], \"121-avl_insert_5\"), compare(\"./121-avl_insert_5\", \"270/1507/output_5\"), valgrind_error(\"./121-avl_insert_5\"), valgrind_leak(\"./121-avl_insert_5\"))", :files=>"270/1507/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Right left case", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1507/main_6.c\"], \"121-avl_insert_6\"), compare(\"./121-avl_insert_6\", \"270/1507/output_6\"), valgrind_error(\"./121-avl_insert_6\"), valgrind_leak(\"./121-avl_insert_6\"))", :files=>"270/1507/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Left right case", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1507/main_7.c\"], \"121-avl_insert_7\"), compare(\"./121-avl_insert_7\", \"270/1507/output_7\"), valgrind_error(\"./121-avl_insert_7\"), valgrind_leak(\"./121-avl_insert_7\"))", :files=>"270/1507/main_7.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./121-avl_insert_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"121-avl_insert.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"0-binary_tree_node.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_0.c\"], \"122-array_to_avl_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with a single value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./122-array_to_avl_0\", \"270/1508/output_0\"), valgrind_error(\"./122-array_to_avl_0\"), valgrind_leak(\"./122-array_to_avl_0\"))", :files=>"270/1508/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 3 values. No rotation needed", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_1.c\"], \"122-array_to_avl_1\"), compare(\"./122-array_to_avl_1\", \"270/1508/output_1\"), valgrind_error(\"./122-array_to_avl_1\"), valgrind_leak(\"./122-array_to_avl_1\"))", :files=>"270/1508/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 9 values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_2.c\"], \"122-array_to_avl_2\"), compare(\"./122-array_to_avl_2\", \"270/1508/output_2\"), valgrind_error(\"./122-array_to_avl_2\"), valgrind_leak(\"./122-array_to_avl_2\"))", :files=>"270/1508/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 50 values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_3.c\"], \"122-array_to_avl_3\"), compare(\"./122-array_to_avl_3\", \"270/1508/output_3\"), valgrind_error(\"./122-array_to_avl_3\"), valgrind_leak(\"./122-array_to_avl_3\"))", :files=>"270/1508/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 15 values in ascending order", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_4.c\"], \"122-array_to_avl_4\"), compare(\"./122-array_to_avl_4\", \"270/1508/output_4\"), valgrind_error(\"./122-array_to_avl_4\"), valgrind_leak(\"./122-array_to_avl_4\"))", :files=>"270/1508/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 15 value in descending order", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_5.c\"], \"122-array_to_avl_5\"), compare(\"./122-array_to_avl_5\", \"270/1508/output_5\"), valgrind_error(\"./122-array_to_avl_5\"), valgrind_leak(\"./122-array_to_avl_5\"))", :files=>"270/1508/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 3 values: Right left case", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_6.c\"], \"122-array_to_avl_6\"), compare(\"./122-array_to_avl_6\", \"270/1508/output_6\"), valgrind_error(\"./122-array_to_avl_6\"), valgrind_leak(\"./122-array_to_avl_6\"))", :files=>"270/1508/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 3 values: Left right case", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_7.c\"], \"122-array_to_avl_7\"), compare(\"./122-array_to_avl_7\", \"270/1508/output_7\"), valgrind_error(\"./122-array_to_avl_7\"), valgrind_leak(\"./122-array_to_avl_7\"))", :files=>"270/1508/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `array_to_avl(NULL, 0);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1508/main_8.c\"], \"122-array_to_avl_8\"), compare(\"./122-array_to_avl_8\", \"270/1508/output_8\"), valgrind_error(\"./122-array_to_avl_8\"), valgrind_leak(\"./122-array_to_avl_8\"))", :files=>"270/1508/main_8.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./122-array_to_avl_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"122-array_to_avl.c\", \"121-avl_insert.c\", \"0-binary_tree_node.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"14-binary_tree_balance.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_array_to_avl.c\", \"270/helpers/_avl_insert.c\", \"270/helpers/_binary_tree_rotate_left.c\", \"270/helpers/_binary_tree_rotate_right.c\", \"270/helpers/_binary_tree_balance.c\", \"270/helpers/_binary_tree_node.c\", \"270/1509/main_0.c\"], \"123-avl_remove_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove a leaf", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./123-avl_remove_0\", \"270/1509/output_0\"), valgrind_error(\"./123-avl_remove_0\"), valgrind_leak(\"./123-avl_remove_0\"))", :files=>"270/1509/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove a node that changes the balance", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_array_to_avl.c\", \"270/helpers/_avl_insert.c\", \"270/helpers/_binary_tree_rotate_left.c\", \"270/helpers/_binary_tree_rotate_right.c\", \"270/helpers/_binary_tree_balance.c\", \"270/helpers/_binary_tree_node.c\", \"270/1509/main_1.c\"], \"123-avl_remove_1\"), compare(\"./123-avl_remove_1\", \"270/1509/output_1\"), valgrind_error(\"./123-avl_remove_1\"), valgrind_leak(\"./123-avl_remove_1\"))", :files=>"270/1509/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove a node that does not change the balance", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_array_to_avl.c\", \"270/helpers/_avl_insert.c\", \"270/helpers/_binary_tree_rotate_left.c\", \"270/helpers/_binary_tree_rotate_right.c\", \"270/helpers/_binary_tree_balance.c\", \"270/helpers/_binary_tree_node.c\", \"270/1509/main_2.c\"], \"123-avl_remove_2\"), compare(\"./123-avl_remove_2\", \"270/1509/output_2\"), valgrind_error(\"./123-avl_remove_2\"), valgrind_leak(\"./123-avl_remove_2\"))", :files=>"270/1509/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove a node that does not change the balance", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_array_to_avl.c\", \"270/helpers/_avl_insert.c\", \"270/helpers/_binary_tree_rotate_left.c\", \"270/helpers/_binary_tree_rotate_right.c\", \"270/helpers/_binary_tree_balance.c\", \"270/helpers/_binary_tree_node.c\", \"270/1509/main_3.c\"], \"123-avl_remove_3\"), compare(\"./123-avl_remove_3\", \"270/1509/output_3\"), valgrind_error(\"./123-avl_remove_3\"), valgrind_leak(\"./123-avl_remove_3\"))", :files=>"270/1509/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove several nodes in a row", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_array_to_avl.c\", \"270/helpers/_avl_insert.c\", \"270/helpers/_binary_tree_rotate_left.c\", \"270/helpers/_binary_tree_rotate_right.c\", \"270/helpers/_binary_tree_balance.c\", \"270/helpers/_binary_tree_node.c\", \"270/1509/main_4.c\"], \"123-avl_remove_4\"), compare(\"./123-avl_remove_4\", \"270/1509/output_4\"), valgrind_error(\"./123-avl_remove_4\"), valgrind_leak(\"./123-avl_remove_4\"))", :files=>"270/1509/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `avl_remove(NULL, 12);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_array_to_avl.c\", \"270/helpers/_avl_insert.c\", \"270/helpers/_binary_tree_rotate_left.c\", \"270/helpers/_binary_tree_rotate_right.c\", \"270/helpers/_binary_tree_balance.c\", \"270/helpers/_binary_tree_node.c\", \"270/1509/main_5.c\"], \"123-avl_remove_5\"), compare(\"./123-avl_remove_5\", \"270/1509/output_5\"), valgrind_error(\"./123-avl_remove_5\"), valgrind_leak(\"./123-avl_remove_5\"))", :files=>"270/1509/main_5.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"123-avl_remove.c\", \"14-binary_tree_balance.c\", \"103-binary_tree_rotate_left.c\", \"104-binary_tree_rotate_right.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"124-sorted_array_to_avl.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"124-sorted_array_to_avl.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1557/main_0.c\"], \"124-sorted_array_to_avl_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 1 single value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./124-sorted_array_to_avl_0\", \"270/1557/output_0\"), valgrind_error(\"./124-sorted_array_to_avl_0\"), valgrind_leak(\"./124-sorted_array_to_avl_0\"))", :files=>"270/1557/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 3 values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"124-sorted_array_to_avl.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1557/main_1.c\"], \"124-sorted_array_to_avl_1\"), compare(\"./124-sorted_array_to_avl_1\", \"270/1557/output_1\"), valgrind_error(\"./124-sorted_array_to_avl_1\"), valgrind_leak(\"./124-sorted_array_to_avl_1\"))", :files=>"270/1557/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 7 values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"124-sorted_array_to_avl.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1557/main_2.c\"], \"124-sorted_array_to_avl_2\"), compare(\"./124-sorted_array_to_avl_2\", \"270/1557/output_2\"), valgrind_error(\"./124-sorted_array_to_avl_2\"), valgrind_leak(\"./124-sorted_array_to_avl_2\"))", :files=>"270/1557/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with 15 elements", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"124-sorted_array_to_avl.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1557/main_3.c\"], \"124-sorted_array_to_avl_3\"), compare(\"./124-sorted_array_to_avl_3\", \"270/1557/output_3\"), valgrind_error(\"./124-sorted_array_to_avl_3\"), valgrind_leak(\"./124-sorted_array_to_avl_3\"))", :files=>"270/1557/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `sorted_array_to_avl(NULL, 0);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"124-sorted_array_to_avl.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1557/main_4.c\"], \"124-sorted_array_to_avl_4\"), compare(\"./124-sorted_array_to_avl_4\", \"270/1557/output_4\"), valgrind_error(\"./124-sorted_array_to_avl_4\"), valgrind_leak(\"./124-sorted_array_to_avl_4\"))", :files=>"270/1557/main_4.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./124-sorted_array_to_avl_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"124-sorted_array_to_avl.c\", \"0-binary_tree_node.c\"], [\"--max-funcs=2\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"124-sorted_array_to_avl.c\", \"0-binary_tree_node.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"125-O\"])"}]}, {:concept_id=>26, :body=>"Correct values", :points=>3, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"compare(\"cat 125-O\", \"270/1510/125-O\")"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"130-binary_tree_is_heap.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_0.c\"], \"130-binary_tree_is_heap_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single node", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./130-binary_tree_is_heap_0\", \"270/1554/output_0\"), valgrind_error(\"./130-binary_tree_is_heap_0\"), valgrind_leak(\"./130-binary_tree_is_heap_0\"))", :files=>"270/1554/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_1.c\"], \"130-binary_tree_is_heap_1\"), compare(\"./130-binary_tree_is_heap_1\", \"270/1554/output_1\"), valgrind_error(\"./130-binary_tree_is_heap_1\"), valgrind_leak(\"./130-binary_tree_is_heap_1\"))", :files=>"270/1554/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 2", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_2.c\"], \"130-binary_tree_is_heap_2\"), compare(\"./130-binary_tree_is_heap_2\", \"270/1554/output_2\"), valgrind_error(\"./130-binary_tree_is_heap_2\"), valgrind_leak(\"./130-binary_tree_is_heap_2\"))", :files=>"270/1554/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Perfect tree of height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_3.c\"], \"130-binary_tree_is_heap_3\"), compare(\"./130-binary_tree_is_heap_3\", \"270/1554/output_3\"), valgrind_error(\"./130-binary_tree_is_heap_3\"), valgrind_leak(\"./130-binary_tree_is_heap_3\"))", :files=>"270/1554/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: One node of right subtree is higher than its parent", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_4.c\"], \"130-binary_tree_is_heap_4\"), compare(\"./130-binary_tree_is_heap_4\", \"270/1554/output_4\"), valgrind_error(\"./130-binary_tree_is_heap_4\"), valgrind_leak(\"./130-binary_tree_is_heap_4\"))", :files=>"270/1554/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: One node in left subtree is higher than its parent", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_5.c\"], \"130-binary_tree_is_heap_5\"), compare(\"./130-binary_tree_is_heap_5\", \"270/1554/output_5\"), valgrind_error(\"./130-binary_tree_is_heap_5\"), valgrind_leak(\"./130-binary_tree_is_heap_5\"))", :files=>"270/1554/main_5.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_6.c\"], \"130-binary_tree_is_heap_6\"), compare(\"./130-binary_tree_is_heap_6\", \"270/1554/output_6\"), valgrind_error(\"./130-binary_tree_is_heap_6\"), valgrind_leak(\"./130-binary_tree_is_heap_6\"))", :files=>"270/1554/main_6.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_7.c\"], \"130-binary_tree_is_heap_7\"), compare(\"./130-binary_tree_is_heap_7\", \"270/1554/output_7\"), valgrind_error(\"./130-binary_tree_is_heap_7\"), valgrind_leak(\"./130-binary_tree_is_heap_7\"))", :files=>"270/1554/main_7.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_8.c\"], \"130-binary_tree_is_heap_8\"), compare(\"./130-binary_tree_is_heap_8\", \"270/1554/output_8\"), valgrind_error(\"./130-binary_tree_is_heap_8\"), valgrind_leak(\"./130-binary_tree_is_heap_8\"))", :files=>"270/1554/main_8.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not complete tree of max height 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>19, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_9.c\"], \"130-binary_tree_is_heap_9\"), compare(\"./130-binary_tree_is_heap_9\", \"270/1554/output_9\"), valgrind_error(\"./130-binary_tree_is_heap_9\"), valgrind_leak(\"./130-binary_tree_is_heap_9\"))", :files=>"270/1554/main_9.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Not complete tree of max height 3 (mirror)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_10.c\"], \"130-binary_tree_is_heap_10\"), compare(\"./130-binary_tree_is_heap_10\", \"270/1554/output_10\"), valgrind_error(\"./130-binary_tree_is_heap_10\"), valgrind_leak(\"./130-binary_tree_is_heap_10\"))", :files=>"270/1554/main_10.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Complete tree of max height 4 (only one node in depth 4)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>21, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_11.c\"], \"130-binary_tree_is_heap_11\"), compare(\"./130-binary_tree_is_heap_11\", \"270/1554/output_11\"), valgrind_error(\"./130-binary_tree_is_heap_11\"), valgrind_leak(\"./130-binary_tree_is_heap_11\"))", :files=>"270/1554/main_11.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `binary_tree_is_heap(NULL);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>22, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"130-binary_tree_is_heap.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1554/main_12.c\"], \"130-binary_tree_is_heap_12\"), compare(\"./130-binary_tree_is_heap_12\", \"270/1554/output_12\"), valgrind_error(\"./130-binary_tree_is_heap_12\"), valgrind_leak(\"./130-binary_tree_is_heap_12\"))", :files=>"270/1554/main_12.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"130-binary_tree_is_heap.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"130-binary_tree_is_heap.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"131-heap_insert.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1546/main_0.c\"], \"131-heap_insert_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Single value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./131-heap_insert_0\", \"270/1546/output_0\"), valgrind_error(\"./131-heap_insert_0\"), valgrind_leak(\"./131-heap_insert_0\"))", :files=>"270/1546/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 3 values (not sorted)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1546/main_1.c\"], \"131-heap_insert_1\"), compare(\"./131-heap_insert_1\", \"270/1546/output_1\"), valgrind_error(\"./131-heap_insert_1\"), valgrind_leak(\"./131-heap_insert_1\"))", :files=>"270/1546/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 9 values (not sorted)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1546/main_2.c\"], \"131-heap_insert_2\"), compare(\"./131-heap_insert_2\", \"270/1546/output_2\"), valgrind_error(\"./131-heap_insert_2\"), valgrind_leak(\"./131-heap_insert_2\"))", :files=>"270/1546/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 50 values (not sorted)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1546/main_3.c\"], \"131-heap_insert_3\"), compare(\"./131-heap_insert_3\", \"270/1546/output_3\"), valgrind_error(\"./131-heap_insert_3\"), valgrind_leak(\"./131-heap_insert_3\"))", :files=>"270/1546/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Insert 9 values (sorted)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1546/main_4.c\"], \"131-heap_insert_4\"), compare(\"./131-heap_insert_4\", \"270/1546/output_4\"), valgrind_error(\"./131-heap_insert_4\"), valgrind_leak(\"./131-heap_insert_4\"))", :files=>"270/1546/main_4.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./131-heap_insert_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"131-heap_insert.c\", \"0-binary_tree_node.c\"], [\"--max-funcs=6\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"131-heap_insert.c\", \"0-binary_tree_node.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1547/main_0.c\"], \"132-array_to_heap_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Array with a single value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./132-array_to_heap_0\", \"270/1547/output_0\"), valgrind_error(\"./132-array_to_heap_0\"), valgrind_leak(\"./132-array_to_heap_0\"))", :files=>"270/1547/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Arrayw with 3 values (not sorted)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1547/main_1.c\"], \"132-array_to_heap_1\"), compare(\"./132-array_to_heap_1\", \"270/1547/output_1\"), valgrind_error(\"./132-array_to_heap_1\"), valgrind_leak(\"./132-array_to_heap_1\"))", :files=>"270/1547/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Arrayw with 9 values (not sorted)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1547/main_2.c\"], \"132-array_to_heap_2\"), compare(\"./132-array_to_heap_2\", \"270/1547/output_2\"), valgrind_error(\"./132-array_to_heap_2\"), valgrind_leak(\"./132-array_to_heap_2\"))", :files=>"270/1547/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Arrayw with 50 values (not sorted)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1547/main_3.c\"], \"132-array_to_heap_3\"), compare(\"./132-array_to_heap_3\", \"270/1547/output_3\"), valgrind_error(\"./132-array_to_heap_3\"), valgrind_leak(\"./132-array_to_heap_3\"))", :files=>"270/1547/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Arrayw with 3 values (sorted in DESC order)", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1547/main_4.c\"], \"132-array_to_heap_4\"), compare(\"./132-array_to_heap_4\", \"270/1547/output_4\"), valgrind_error(\"./132-array_to_heap_4\"), valgrind_leak(\"./132-array_to_heap_4\"))", :files=>"270/1547/main_4.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `array_to_heap(NULL, 0);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_delete.c\", \"270/1547/main_5.c\"], \"132-array_to_heap_5\"), compare(\"./132-array_to_heap_5\", \"270/1547/output_5\"), valgrind_error(\"./132-array_to_heap_5\"), valgrind_leak(\"./132-array_to_heap_5\"))", :files=>"270/1547/main_5.c"}]}, {:concept_id=>26, :body=>"Handled `malloc` return", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>20, :commands=>[{:check_docker_image_id=>1, :command=>"malloc(\"./132-array_to_heap_0\", \"c/malloc/libfake_malloc.so\")"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"132-array_to_heap.c\", \"131-heap_insert.c\", \"0-binary_tree_node.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"133-heap_extract.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1548/main_0.c\"], \"133-heap_extract_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Extract 1 value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./133-heap_extract_0\", \"270/1548/output_0\"), valgrind_error(\"./133-heap_extract_0\"), valgrind_leak(\"./133-heap_extract_0\"))", :files=>"270/1548/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Extract 2 value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1548/main_1.c\"], \"133-heap_extract_1\"), compare(\"./133-heap_extract_1\", \"270/1548/output_1\"), valgrind_error(\"./133-heap_extract_1\"), valgrind_leak(\"./133-heap_extract_1\"))", :files=>"270/1548/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Extract 4 value", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1548/main_2.c\"], \"133-heap_extract_2\"), compare(\"./133-heap_extract_2\", \"270/1548/output_2\"), valgrind_error(\"./133-heap_extract_2\"), valgrind_leak(\"./133-heap_extract_2\"))", :files=>"270/1548/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Extract all the values", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1548/main_3.c\"], \"133-heap_extract_3\"), compare(\"./133-heap_extract_3\", \"270/1548/output_3\"), valgrind_error(\"./133-heap_extract_3\"), valgrind_leak(\"./133-heap_extract_3\"))", :files=>"270/1548/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `heap_extract(&root);`, `root` being `NULL`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_binary_tree_delete.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1548/main_4.c\"], \"133-heap_extract_4\"), compare(\"./133-heap_extract_4\", \"270/1548/output_4\"), valgrind_error(\"./133-heap_extract_4\"), valgrind_leak(\"./133-heap_extract_4\"))", :files=>"270/1548/main_4.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"133-heap_extract.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"133-heap_extract.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"134-heap_to_sorted_array.c\", \"133-heap_extract.c\"])"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"gcc([\"134-heap_to_sorted_array.c\", \"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1565/main_0.c\"], \"134-heap_to_sorted_array_0\")"}]}, {:concept_id=>26, :body=>"Correct output - case: Heap of size 1", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(compare(\"./134-heap_to_sorted_array_0\", \"270/1565/output_0\"), valgrind_error(\"./134-heap_to_sorted_array_0\"), valgrind_leak(\"./134-heap_to_sorted_array_0\"))", :files=>"270/1565/main_0.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Heap of size 3", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"134-heap_to_sorted_array.c\", \"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1565/main_1.c\"], \"134-heap_to_sorted_array_1\"), compare(\"./134-heap_to_sorted_array_1\", \"270/1565/output_1\"), valgrind_error(\"./134-heap_to_sorted_array_1\"), valgrind_leak(\"./134-heap_to_sorted_array_1\"))", :files=>"270/1565/main_1.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Heap of size 9", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"134-heap_to_sorted_array.c\", \"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1565/main_2.c\"], \"134-heap_to_sorted_array_2\"), compare(\"./134-heap_to_sorted_array_2\", \"270/1565/output_2\"), valgrind_error(\"./134-heap_to_sorted_array_2\"), valgrind_leak(\"./134-heap_to_sorted_array_2\"))", :files=>"270/1565/main_2.c"}]}, {:concept_id=>26, :body=>"Correct output - case: Heap of size 50", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"134-heap_to_sorted_array.c\", \"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1565/main_3.c\"], \"134-heap_to_sorted_array_3\"), compare(\"./134-heap_to_sorted_array_3\", \"270/1565/output_3\"), valgrind_error(\"./134-heap_to_sorted_array_3\"), valgrind_leak(\"./134-heap_to_sorted_array_3\"))", :files=>"270/1565/main_3.c"}]}, {:concept_id=>26, :body=>"Correct output - case: `heap_to_sorted_array(NULL, &out_size);`", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(gcc([\"134-heap_to_sorted_array.c\", \"133-heap_extract.c\", \"270/binary_tree_print.c\", \"270/helpers/_binary_tree_node.c\", \"270/helpers/_heap_insert.c\", \"270/helpers/_array_to_heap.c\", \"270/1565/main_4.c\"], \"134-heap_to_sorted_array_4\"), compare(\"./134-heap_to_sorted_array_4\", \"270/1565/output_4\"), valgrind_error(\"./134-heap_to_sorted_array_4\"), valgrind_leak(\"./134-heap_to_sorted_array_4\"))", :files=>"270/1565/main_4.c"}]}, {:concept_id=>26, :body=>"Betty coding style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>100, :commands=>[{:check_docker_image_id=>1, :command=>"betty_code([\"134-heap_to_sorted_array.c\", \"133-heap_extract.c\"])"}]}, {:concept_id=>26, :body=>"Betty documentation style", :points=>1, :check_type=>1, :check_label=>"Requirement", :eliminatory=>false, :position=>101, :commands=>[{:check_docker_image_id=>1, :command=>"betty_doc([\"134-heap_to_sorted_array.c\", \"133-heap_extract.c\"])"}]}], [{:concept_id=>26, :body=>"File is present", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"files_exist([\"135-O\"])"}]}, {:concept_id=>26, :body=>"Correct values", :points=>3, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"compare(\"cat 135-O\", \"270/1549/135-O\")"}]}]]
tasks_id = [1445, 1468, 1469, 1470, 1471, 1472, 1473, 1474, 1475, 1476, 1477, 1478, 1479, 1480, 1481, 1482, 1483, 1558, 1559, 1485, 1536, 1545, 1505, 1506, 1552, 1486, 1487, 1502, 1503, 1504, 1553, 1507, 1508, 1509, 1557, 1510, 1554, 1546, 1547, 1548, 1565, 1549]

id = 0
tasks_id.each do |t_id|
task = Task.find(t_id)
task.update(:github_repo => "holbertonschool-low_level_programming")
# puts "Task #{t_id}"
info[id].each do |i|
check = Check.create! :task => task, :concept_id => i[:concept_id], :body => i[:body], :points => i[:points], :check_type => i[:check_type], :eliminatory => i[:eliminatory], :check_label => i[:check_label], :position => i[:position]
# puts i
next if i[:commands].nil?
i[:commands].each do |c|
command = CheckCommand.create! :check => check, :check_docker_image_id => c[:check_docker_image_id], :command => c[:command].gsub("###FILE###", task.github_file).gsub("###ID###", task.id.to_s).gsub("###EXEC###", task.github_file.split('.c')[0]), :online => true, :files => c[:files]
# puts c
end
end
id = id + 1
# puts
end
