@info = [{:concept_id=>26, :body=>"README is present and not empty", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(files_exist([\"README.md\"]), op_not(files_empty([\"README.md\"])))"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(is_equal(\"\", exec_bash(\"rm -f hsh\")), gcc([\"*.c\"], \"hsh\"))"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `setenv HBTN` (only one parameter) and display the environment\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/setenv/setenv_one_param.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./setenv_one_param.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f setenv_one_param.bash\")))", :files=>"235/checker.bash, 235/all/setenv/setenv_one_param.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `setenv` without parameter and display the environment\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/setenv/setenv_no_param.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./setenv_no_param.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f setenv_no_param.bash\")))", :files=>"235/checker.bash, 235/all/setenv/setenv_no_param.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Display the environment, setenv an existing variable, and display again\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/setenv/setenv_existing_var.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./setenv_existing_var.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f setenv_existing_var.bash\")))", :files=>"235/checker.bash, 235/all/setenv/setenv_existing_var.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Display the environment, set a new variable using `setenv`, and display the environment again\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/setenv/setenv.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./setenv.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f setenv.bash\")))", :files=>"235/checker.bash, 235/all/setenv/setenv.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Display the environment, unset an existing environment variable using `unsetenv` and display the environment again\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/unsetenv/unsetenv.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./unsetenv.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f unsetenv.bash\")))", :files=>"235/checker.bash, 235/all/unsetenv/unsetenv.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Display the environment, unset a not-existing environment variable using `unsetenv` and display the environment again\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/unsetenv/unsetenv_not_existing_var.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./unsetenv_not_existing_var.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f unsetenv_not_existing_var.bash\")))", :files=>"235/checker.bash, 235/all/unsetenv/unsetenv_not_existing_var.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `unsetenv` (without parameter) and display the environment\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/unsetenv/unsetenv_no_param.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./unsetenv_no_param.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f unsetenv_no_param.bash\")))", :files=>"235/checker.bash, 235/all/unsetenv/unsetenv_no_param.bash"}]}]