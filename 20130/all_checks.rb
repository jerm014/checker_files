@info = [{:concept_id=>26, :body=>"README is present and not empty", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(files_exist([\"README.md\"]), op_not(files_empty([\"README.md\"])))"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(is_equal(\"\", exec_bash(\"rm -f hsh\")), gcc([\"*.c\"], \"hsh\"))"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute a command that fails, and display its status with `echo $?`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/variables/echo_status_fail.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./echo_status_fail.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f echo_status_fail.bash\")))", :files=>"235/checker.bash, 235/all/variables/echo_status_fail.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `/bin/ls $HBTN_DIR` where `HBTN_DIR` is \"/var\"\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/variables/ls_var.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./ls_var.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f ls_var.bash\")))", :files=>"235/checker.bash, 235/all/variables/ls_var.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute a command that succeeds and display its status with `echo $?`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/variables/echo_status.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./echo_status.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f echo_status.bash\")))", :files=>"235/checker.bash, 235/all/variables/echo_status.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Set the variable `HBTN_ECHO` to be `/bin/echo`, and execute `$HTBN_ECHO hbtn`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/variables/echo_as_var.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./echo_as_var.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f echo_as_var.bash\")))", :files=>"235/checker.bash, 235/all/variables/echo_as_var.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `echo $HBTN_UNDEF` where `HBTN_UNDER` does not exist\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/variables/echo_unknown_var.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./echo_unknown_var.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f echo_unknown_var.bash\")))", :files=>"235/checker.bash, 235/all/variables/echo_unknown_var.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Display shell PID with `echo $$`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/variables/echo_pid.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./echo_pid.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f echo_pid.bash\")))", :files=>"235/checker.bash, 235/all/variables/echo_pid.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `echo` 3 times, one of them with `$ $` (no variable)\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/variables/echo_pid_fake.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./echo_pid_fake.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f echo_pid_fake.bash\")))", :files=>"235/checker.bash, 235/all/variables/echo_pid_fake.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `echo $HBTN_VAR` where `HBTN_VAR` contains a string\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/variables/echo_var.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./echo_var.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f echo_var.bash\")))", :files=>"235/checker.bash, 235/all/variables/echo_var.bash"}]}]