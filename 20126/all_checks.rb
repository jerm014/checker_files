@info = [{:concept_id=>26, :body=>"README is present and not empty", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>1, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(files_exist([\"README.md\"]), op_not(files_empty([\"README.md\"])))"}]}, {:concept_id=>26, :body=>"Compile program", :points=>0, :check_type=>1, :check_label=>"Requirement", :eliminatory=>true, :position=>2, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(is_equal(\"\", exec_bash(\"rm -f hsh\")), gcc([\"*.c\"], \"hsh\"))"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `cd` without parameter\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>10, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_no_arg.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_no_arg.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_no_arg.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_no_arg.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove `$HOME` and execute `cd` without parameter\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>11, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_no_arg_rm_home.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_no_arg_rm_home.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_no_arg_rm_home.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_no_arg_rm_home.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Try to `cd /root` (without permission)\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>12, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_no_permission.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_no_permission.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_no_permission.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_no_permission.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Remove `OLDPWD` and execute `cd -`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>13, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_dash_rm_oldpwd.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_dash_rm_oldpwd.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_dash_rm_oldpwd.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_dash_rm_oldpwd.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Cd to `/tmp`, then to `dev` and execute `cd -`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>14, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_dash.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_dash.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_dash.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_dash.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Execute `cd /tmp`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>15, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_normal.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_normal.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_normal.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_normal.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Try to `cd /hbtn` (Folder does not exist)\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>16, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_not_existing_dir.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_not_existing_dir.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_not_existing_dir.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_not_existing_dir.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Set the variable `OLDPWD` to `/tmp` and execute `cd -`\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>17, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_dash_change_oldpwd.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_dash_change_oldpwd.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_dash_change_oldpwd.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_dash_change_oldpwd.bash"}]}, {:concept_id=>26, :body=>"Correct output - case: Set `$HOME` to `/tmp` and execute `cd` without parameter\n", :points=>1, :check_type=>1, :check_label=>"Code", :eliminatory=>false, :position=>18, :commands=>[{:check_docker_image_id=>1, :command=>"op_and(copy_files([\"235/checker.bash\", \"235/all/cd/cd_no_arg_change_home.bash\", \"235/allowed_functions\"]), run_bash(\"./checker.bash --valgrind --ltrace ./hsh ./cd_no_arg_change_home.bash\", \"OK\"), is_equal(\"\", exec_bash(\"rm -f cd_no_arg_change_home.bash\")))", :files=>"235/checker.bash, 235/all/cd/cd_no_arg_change_home.bash"}]}]