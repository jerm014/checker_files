{ "id": 235, "name": "0x15. C - Simple Shell", "track_id": null, "description": "Write a simple UNIX command interpreter.\r\n\r\n\r\n[![Shell](https://s3.amazonaws.com/intranet-projects-files/holbertonschool-low_level_programming/235/shell.jpeg)](https://twitter.com/spencerhcheng/status/855104635069054977)\r\n\r\n##Readme\r\n\r\nRead or watch: [Unix shell](https://en.wikipedia.org/wiki/Unix_shell), [Thompson shell](https://en.wikipedia.org/wiki/Thompson_shell), [Ken Thompson](https://en.wikipedia.org/wiki/Ken_Thompson), [Everything you need to know to start coding your own shell](https://intranet.hbtn.io/concepts/64).\r\n\r\nRun `sh`.\r\n\r\nman: see bellow.\r\n\r\n##What you should learn from this project\r\n\r\nAt the end of this project you are expected to be able to explain to anyone, without the help of Google:\r\n\r\n- Who designed and implemented the original Unix operating system\r\n- Who wrote the first version of the UNIX shell\r\n- Who invented the B programming language (the direct predecessor to the C programming language)\r\n- Who is Ken Thompson\r\n- How does a shell work\r\n- What is a pid and an ppid\r\n- How to manipulate the environment of the current process\r\n- What is the difference between a function and a system call\r\n- How to create processes\r\n- What are the three prototypes of `main`\r\n- How does the shell use the `PATH` to find the programs\r\n- How to execute another program with the `execve` system call\r\n- How to suspend the execution of a process until one of its children terminates\r\n- What is `EOF` / \"end-of-file\"?\r\n\r\n##Requirements\r\n\r\n- Allowed editors: `vi`, `vim`, `emacs`\r\n- All your files will be compiled on Ubuntu 14.04 LTS\r\n- Your C programs and functions will be compiled with `gcc 4.8.4` using the flags `-Wall` `-Werror` `-Wextra` `and -pedantic`\r\n- All your files should end with a new line\r\n- A `README.md` file, at the root of the folder of the project is mandatory\r\n- Your code should use the `Betty` style. It will be checked using [betty-style.pl](https://github.com/hs-hq/Betty/blob/master/betty-style.pl) and [betty-doc.pl](https://github.com/hs-hq/Betty/blob/master/betty-doc.pl)\r\n- No more than 5 functions per file\r\n- All your header files should be include guarded\r\n- Use system calls only when you need to ([why?](https://www.quora.com/Why-are-system-calls-expensive-in-operating-systems))\r\n\r\n## Output\r\n\r\n- Unless specified otherwise, your program **must have the exact same output** as `sh` (`/bin/sh`) as well as the exact same error output.\r\n- The only difference is when you print an error, the name of the program must be equivalent to your `argv[0]` (See below)\r\n\r\nExample of error with `sh`:\r\n\r\n```\r\n$ echo \"qwerty\" | /bin/sh\r\n/bin/sh: 1: qwerty: not found\r\n$ echo \"qwerty\" | /bin/../bin/sh\r\n/bin/../bin/sh: 1: qwerty: not found\r\n$\r\n```\r\n\r\nSame error with your program `hsh`:\r\n\r\n```\r\n$ echo \"qwerty\" | ./hsh\r\n./hsh: 1: qwerty: not found\r\n$ echo \"qwerty\" | ./././hsh\r\n./././hsh: 1: qwerty: not found\r\n$\r\n\r\n```\r\n\r\n## List of allowed functions and system calls\r\n\r\n- `access` (man 2 access)\r\n- `chdir` (man 2 chdir)\r\n- `close` (man 2 close)\r\n- `closedir` (man 3 closedir)\r\n- `execve` (man 2 execve)\r\n- `exit` (man 3 exit)\r\n- `fork` (man 2 fork)\r\n- `free` (man 3 free)\r\n- `stat` (\\_\\_xstat) (man 2 stat)\r\n- `lstat` (\\_\\_lxstat) (man 2 lstat)\r\n- `fstat` (\\_\\_fxstat) (man 2 fstat)\r\n- `getcwd` (man 3 getcwd)\r\n- `getline` (man 3 getline)\r\n- `kill` (man 2 kill)\r\n- `malloc` (man 3 malloc)\r\n- `open` (man 2 open)\r\n- `opendir` (man 3 opendir)\r\n- `perror` (man 3 perror)\r\n- `read` (man 2 read)\r\n- `readdir` (man 3 readdir)\r\n- `signal` (man 2 signal)\r\n- `strtok` (man 3 strtok)\r\n- `wait` (man 2 wait)\r\n- `waitpid` (man 2 waitpid)\r\n- `wait3` (man 2 wait3)\r\n- `wait4` (man 2 wait4)\r\n- `write` (man 2 write)\r\n- `_exit` (man 2 _exit)\r\n- `isatty` (man 3 isatty)\r\n- `fflush` (man 3 fflush)\r\n\r\n##Compilation\r\n\r\nYour shell will be compiled this way:\r\n\r\n```\r\ngcc -Wall -Werror -Wextra -pedantic *.c -o hsh\r\n```\r\n\r\n##Testing\r\n\r\nYour shell should work like this in interactive mode:\r\n\r\n```\r\n$ ./hsh\r\n($) /bin/ls\r\nhsh main.c shell.c\r\n($)\r\n($) exit\r\n$\r\n```\r\n\r\nBut also in non-interactive mode:\r\n\r\n```\r\n$ echo \"/bin/ls\" | ./hsh\r\nhsh main.c shell.c test_ls_2\r\n$\r\n$ cat test_ls_2\r\n/bin/ls\r\n/bin/ls\r\n$\r\n$ cat test_ls_2 | ./hsh\r\nhsh main.c shell.c test_ls_2\r\nhsh main.c shell.c test_ls_2\r\n$\r\n```\r\n\r\n\r\n##Checks\r\n\r\nThere will be no checks released before the deadline. We **strongly** encourage the entire class to work together to create a suite of checks covering both regular tests and edged cases for each task. See task `22. Test suite` (#advanced).\r\n", "created_at": "2016-12-05T20:02:46.000Z", "updated_at": "2017-12-01T19:44:16.000Z", "tasks": [{ "id": 1055, "title": "README, man, AUTHORS", "github_repo": "simple_shell", "github_dir": "", "github_file": "README.md, man_1_simple_shell, AUTHORS", "body": "- Write a `README`\r\n- Write a `man` for your shell.\r\n- You should have an `AUTHORS` file at the root of your repository, listing all individuals having contributed content to the repository. Format, see [Docker](https://github.com/docker/docker/blob/master/AUTHORS)" }, { "id": 1033, "title": "Betty would be proud", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Write a beautiful code that passes the Betty checks\r\n\r\n" }, { "id": 1034, "title": "Simple shell 0.1", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Write a UNIX command line interpreter.\r\n\r\n- Usage: `simple_shell`\r\n\r\nYour Shell should:\r\n\r\n- Display a prompt and wait for the user to type a command. A command line always ends with a new line.\r\n- The prompt is displayed again each time a command has been executed.\r\n- The command lines are simple, no semi-columns, no pipes, no redirections or any other advanced features.\r\n- The command lines are made only of one word. No arguments will be passed to programs.\r\n- If an executable cannot be found, print an error message and display the prompt again.\r\n- Handle errors.\r\n- You have to handle the \"end of file\" condition (`Ctrl+D`)\r\n\r\nYou don't have to:\r\n\r\n- use the `PATH`\r\n- implement built-ins\r\n- handle special characters : `\"`, `'`, `` ` ``, `\\`, `*`, `\u0026`, `#`\r\n- be able to move the cursor\r\n- handle commands with arguments\r\n\r\n```\r\njulien@ubuntu:~/shell$ ./shell \r\n#cisfun$ ls\r\n./shell: No such file or directory\r\n#cisfun$ /bin/ls\r\nbarbie_j       env-main.c  exec.c  fork.c  pid.c  ppid.c    prompt   prompt.c  shell.c\tstat.c\t\t   wait\r\nenv-environ.c  exec\t   fork    mypid   ppid   printenv  promptc  shell     stat\ttest_scripting.sh  wait.c\r\n#cisfun$ /bin/ls -l\r\n./shell: No such file or directory\r\n#cisfun$ ^[[D^[[D^[[D\r\n./shell: No such file or directory\r\n#cisfun$ ^[[C^[[C^[[C^[[C\r\n./shell: No such file or directory\r\n#cisfun$ exit\r\n./shell: No such file or directory\r\n#cisfun$ ^C\r\njulien@ubuntu:~/shell$ echo \"/bin/ls\" | ./shell\r\n#cisfun$ barbie_j       env-main.c  exec.c  fork.c  pid.c  ppid.c    prompt   prompt.c  shell.c\tstat.c\t\t   wait\r\nenv-environ.c  exec\t   fork    mypid   ppid   printenv  promptc  shell     stat\ttest_scripting.sh  wait.c\r\n#cisfun$ julien@ubuntu:~/shell$\r\n```" }, { "id": 1035, "title": "Simple shell 0.1.1", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 0.1 +\r\n\r\n- Write your own `getline` function\r\n- Use a buffer to read many chars at once and call the least possible the `read` system call\r\n- You will need to use `static` variables\r\n- You are not allowed to use `getline`\r\n\r\nYou don't have to:\r\n\r\n- be able to move the cursor\r\n" }, { "id": 1036, "title": "Simple shell 0.2", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 0.1 +\r\n\r\n- Handle command lines with arguments\r\n" }, { "id": 1037, "title": "Simple shell 0.2.1", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 0.2 +\r\n\r\n- You are not allowed to use `strtok`" }, { "id": 1038, "title": "Simple shell 0.3", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 0.2 +\r\n\r\n- Handle the `PATH`\r\n\r\n```\r\njulien@ubuntu:~/shell$ ./shell_0.3\r\n:) /bin/ls\r\nbarbie_j       env-main.c  exec.c  fork.c  pid.c  ppid.c    prompt   prompt.c  shell_0.3  stat\t  test_scripting.sh  wait.c\r\nenv-environ.c  exec\t   fork    mypid   ppid   printenv  promptc  shell     shell.c\t  stat.c  wait\r\n:) ls\r\nbarbie_j       env-main.c  exec.c  fork.c  pid.c  ppid.c    prompt   prompt.c  shell_0.3  stat\t  test_scripting.sh  wait.c\r\nenv-environ.c  exec\t   fork    mypid   ppid   printenv  promptc  shell     shell.c\t  stat.c  wait\r\n:) ls -l /tmp \r\ntotal 20\r\n-rw------- 1 julien julien    0 Dec  5 12:09 config-err-aAMZrR\r\ndrwx------ 3 root   root   4096 Dec  5 12:09 systemd-private-062a0eca7f2a44349733e78cb4abdff4-colord.service-V7DUzr\r\ndrwx------ 3 root   root   4096 Dec  5 12:09 systemd-private-062a0eca7f2a44349733e78cb4abdff4-rtkit-daemon.service-ANGvoV\r\ndrwx------ 3 root   root   4096 Dec  5 12:07 systemd-private-062a0eca7f2a44349733e78cb4abdff4-systemd-timesyncd.service-CdXUtH\r\n-rw-rw-r-- 1 julien julien    0 Dec  5 12:09 unity_support_test.0\r\n:) ^C\r\njulien@ubuntu:~/shell$ \r\n```" }, { "id": 1039, "title": "Simple shell 0.4", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 0.3 +\r\n\r\n- Implement the `exit` buit-in, that exits the shell\r\n- Usage: `exit`\r\n- You don't have to handle any argument to the built-in `exit`\r\n" }, { "id": 1040, "title": "Simple shell 0.4.1", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 0.4 +\r\n\r\n- handle arguments for the built-in `exit`\r\n- Usage: `exit status`, where `status` is an integer used to exit the shell\r\n\r\n```\r\njulien@ubuntu:~/shell$ ./shell_0.4.1\r\n$ exit 98\r\njulien@ubuntu:~/shell$ echo $?\r\n98\r\njulien@ubuntu:~/shell$ \r\n```\r\n" }, { "id": 1041, "title": "Simple shell 0.4.2", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 0.4 +\r\n\r\n- Handle `Ctrl+C`: your shell should not quit when the user inputs `^C`\r\n\r\nman 2 `signal`.\r\n\r\n```\r\njulien@ubuntu:~/shell$ ./shell_0.4.2\r\n$ ^C\r\n$ ^C\r\n$ ^C\r\n$ ls /var\r\nbackups  cache\tcrash  lib  local  lock  log  mail  metrics  opt  run  snap  spool  tmp\r\n$ ^C\r\n$ ^C\r\n$ ^C\r\n$ exit\r\njulien@ubuntu:~/shell$ \r\n```" }, { "id": 1042, "title": "Simple shell 1.0", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 0.4 +\r\n\r\n- Implement the `env` **built-in**, that prints the current environment\r\n\r\n```\r\njulien@ubuntu:~/shell$ ./simple_shell\r\n$ env\r\nUSER=julien\r\nLANGUAGE=en_US\r\nSESSION=ubuntu\r\nCOMPIZ_CONFIG_PROFILE=ubuntu\r\nSHLVL=1\r\nHOME=/home/julien\r\nC_IS=Fun_:)\r\nDESKTOP_SESSION=ubuntu\r\nLOGNAME=julien\r\nTERM=xterm-256color\r\nPATH=/home/julien/bin:/home/julien/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\r\nDISPLAY=:0\r\n$ exit\r\njulien@ubuntu:~/shell$ \r\n```" }, { "id": 1043, "title": "setenv, unsetenv", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\nImplement the `setenv` and `unsetenv` builtin commands\r\n\r\n- `setenv`\r\n    - Initialize a new environment variable, or modify an existing one\r\n    - Command syntax: `setenv VARIABLE VALUE`\r\n    - If the command fails or the parameters are not valid, you should print something on the standard error\r\n- `unsetenv`\r\n    - Remove an environment variable\r\n    - Command syntax: `unsetenv VARIABLE`\r\n    - If the command fails or the parameters are not valid, you should print something on the standard error\r\n" }, { "id": 1044, "title": "cd", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\nImplement the builtin command `cd`:\r\n\r\n- Changes the current directory of the process.\r\n- Command syntax: `cd [DIRECTORY]`\r\n- If no argument is given to `cd` the command must be interpreted like `cd $HOME`\r\n- You have to handle the command `cd -`\r\n- You have to update the environment variable `PWD` when you change directory\r\n\r\n`man chdir`, `man getcwd`\r\n" }, { "id": 1045, "title": ";", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\nHandle the commands separator `;`\r\n" }, { "id": 1046, "title": "\u0026\u0026 and ||", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\nHandle the `\u0026\u0026` and `||` shell logical operators.\r\n\r\n" }, { "id": 1047, "title": "alias", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\n- Handle aliases\r\n" }, { "id": 1048, "title": "Variables", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\n- Handle variables replacement\r\n- Handle the $? variable\r\n- Handle the $$ variable\r\n\r\n```\r\njulien@ubuntu:~/shell$ ./shell_2.0\r\n$ ls /var\r\nbackups  cache\tcrash  lib  local  lock  log  mail  metrics  opt  run  snap  spool  tmp\r\n$ echo $?\r\n0\r\n$ echo $$\r\n5104\r\n$ echo $PATH\r\n/home/julien/bin:/home/julien/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin\r\n$ exit \r\njulien@ubuntu:~/shell$ \r\n```" }, { "id": 1049, "title": "Comments", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\n- Handle comments (`#`)\r\n\r\n```\r\njulien@ubuntu:~/shell$ sh\r\n$ echo $$ # ls -la\r\n5114\r\n$ exit\r\njulien@ubuntu:~/shell$ \r\n```" }, { "id": 1050, "title": "help", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\n- Implement the `help` buit-in\r\n- Usage: `help [BUILTIN]`\r\n" }, { "id": 1051, "title": "history", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\n- Implement the history built-in, without any argument\r\n- The `history` built-in displays the history list, one command by line, preceded with line numbers (starting at `0`)\r\n- On `exit`, write the entire history, without line numbers, to a file named `.simple_shell_history` in the directory `$HOME`\r\n- When the shell starts, read the file `.simple_shell_history` in the directory `$HOME` if it exists, and set the first line number to the total number of lines in the file modulo `4096`\r\n" }, { "id": 1052, "title": "File as input", "github_repo": "simple_shell", "github_dir": "", "github_file": "", "body": "Simple shell 1.0 +\r\n\r\n- Usage: `simple_shell [filename]`\r\n- Your shell can take a file as a command line argument\r\n- The file contains all the commands that your shell should run before exiting\r\n- The file should contain one command per line\r\n- In this mode, the shell should not print a prompt and should not read from `stdin`" }, { "id": 1053, "title": "What happens when you type ls -l in the shell", "github_repo": "", "github_dir": "", "github_file": "", "body": "Write a blog post describing step by step what happens when you type `ls -l` and hit Enter in a shell.\r\nTry to explain every step you know of, going in as much details as you can, give examples and draw diagrams when needed.\r\nYou should merge your previous knowledge of the shell with the specifics of how it works under the hoods (including syscalls).\r\n\r\n- Have at least one picture, at the top of the blog post\r\n- Publish your blog post on Medium or LinkedIn\r\n- Share your blog post at least on Twitter and LinkedIn\r\n- Only one blog post by team\r\n- The blog post must be done and published before the first deadline (it will be part of the manual review)\r\n\r\nWhen done, please add all urls below (blog post, tweet, etc.)" }, { "id": 1054, "title": "Test suite", "github_repo": "", "github_dir": "", "github_file": "", "body": "Build a test suite for your shell.\r\n\r\n- The test suite should cover every tasks from `0.` to `20.`\r\n- The test suite should cover every regular cases (many different examples) and edge cases possible\r\n- The entire class will work on the same test suite. Use only one repository (don't forget the `README.md` file)\r\n- Start adding tests asap and not just before the deadline in order to help everyone from day 0\r\n- You can take (or fork) inspiration from [this example](https://github.com/hs-hq/0x15.c/), but it is not mandatory to follow this format/way\r\n- Adopt a style and be consisten. You can for instance follow this [style guide](https://google.github.io/styleguide/shell.xml). If you chose a style that already exist, add it to the README in a style section. If you write your own, create a wiki page attached to the project and refer to it in the README style section.\r\n  - If you choose to use [this code](https://github.com/hs-hq/0x15.c/), make sure to update the style accordingly\r\n- You should have an `AUTHORS` file, listing all individuals having contributed content to the repository. Format, see [Docker](https://github.com/docker/docker/blob/master/AUTHORS)\r\n\r\nThis is a task shared by everyone in the class. Everyone will get the same score for this task. **Go team!**\r\n" }] }